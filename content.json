{"pages":[{"title":"about","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.","link":"/about/"}],"posts":[{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment 깃허브 저장소에 소스 저장하기12345$ git init$ git remote add origin 저장소 주소$ git add .$ git commit -m 'commit msg'$ git push origin master","link":"/2021/04/12/hello-world/"},{"title":"html5 day 1","text":"1. HTML5 HTML(HyperText Markup Language) Markup Language 란? 태그 등을 이용하여 문서나 데이터의 구조를 명기하는 언어의 한가지태그: 문서의 골격에 해당하는 부분을 작성, 원래 텍스트와는 별도로 원고의 교정부호 및 주석을 표현하기 위한 것이었으나 용도가 점차 확장되어 문서의 구조를 표현하는 역할을 하게됨일반적으로는 데이터를 기술하는 정도로만 사용되기 때문에 프로그래밍 언어와는 구분됨 HTML (HyperText Markup Language) 웹페이지를 기술하기 위한 마크업 언어이다. 웹페이지의 내용(content)과 구조(structure)을 담당하는 언어로써 HTML 태그를 통해 정보를 구조화하는 것이다. HTML5 2014년 10월 28일 확정된 차세대 웹 표준으로 아래와 같은 기능들이 추가됨멀티미디어(Multimedia) 플래시와 같은 플러그인의 도움없이 비디오 및 오디오 기능을 자체적으로 지원한다. 그래픽(Graphics &amp; Effects) SVG, 캔버스를 사용한 2차원 그래픽과 CSS3, WebGL을 사용한 3차원 그래픽을 지원한다. 통신(Connectivity) 지금까지의 HTML은 단방향 통신만이 가능하였스나 HTML5는 서버와의 소켓통신을 지원하므로 서버와의 양방향 통신이 가능하다. 디바이스 접근(Device acess) 카메라, 동작센서 등의 하드웨어 기능을 직접적으로 제어할 수 있다. 오프라인 및 저장소(Offline &amp; Storage) 오프라인 상태에서도 애플리케이션을 동작시킬 수 있다. 이는 HTML5가 플랫폼으로서 사용될 수 있음을 의미한다. 시맨틱 태그(Semantics) HTML 요소의 의미를 명확히 설명하는 시맨틱 태그를 도입하여 브라우저, 검색엔진, 개발자 모두에게 콘텐츠의 의미를 명확히 설명할 수 있다. 이를 통해 HTML 요소의 의미를 명확히 해석하고 그 데이터를 활용할 수 있는 시맨틱 웹을 실현할 수 있다. CSS3 CSS3를 지원한다. 2. HTML5의 기본 문법 요소 (Element) HTML요소는 시작태그와 종료태그 그리고 태그사이에 위치한 content로 구성된다.태그는 대소문자를 구별하지 않으나 HTML4의 경우 소문자를 추천하고 있으므로 HTML5에서도 소문자를 사용하는것이 일반적 어브리뷰트 (Attribute) Attribute란 요소의 성질, 특징을 정의하는 명세이다.시작태그에 위치해야 하며 이름과 값의 쌍을 이룬다. 주석 (Comments) 주석은 주로 개발자에게 코드를 설명하기 위해 사용되며 브라우저는 주석을 화면에 표시하지 않는다. 3. 시맨틱 웹 (Semantic Web) - 의미론적 웹? SEO(검색엔진 최적화: Search Engin Optimization) 마케팅 도구를 사용하여 검색엔진이 본인의 웹사이트를 검색하기 알맞은 구조로 웹사이트를 조정하기도 한다.이것은 기본적으로 검색엔진이 웹사이트 정보를 어떻게 수집하는지 아는것으로 부터 시작된다. 검색엔진 검색엔진은 로봇(Robot)이라는 프로그램을 이용해 매일 전세계의 웹사이트 정보를 수집한다.(이것을 크롤링이라 하며 검색엔진의 크롤러가 이를 수행)그리고 검색 사이트 이용자가 검색할 만한 키워드를 미리 예상하여 검색 키워드에 대응하여 검색 키워드에 대응하는 인덱스(색인)을 만들어 둔다.(이것을 인덱싱이라 하며, 검색엔진의 인덱서가 이를 수행)인덱스를 생성할 때 사용되는 정보는 검색 로봇이 수집한 정보인데 결국 웹사이트의 HTML 코드이다.즉, 검색엔진은 HTML 코드만으로 그 의미를 인지하여야 하는데 이때 시맨틱 요소 (Semantic element)를 해석하게 된다. 시맨틱 태그란 브라우저, 검색엔진, 개발자 모두에게 콘텐츠의 의미를 명확히 설명하는 역할을 한다. 시맨틱 웹이란 웹에 존재하는 수많은 웹페이지들에 메타데이터(Metadata)를 부여하여, 기존의 잡다한 데이터 집합이었던 웹페이지를 의미와 관련성을 가지는 거대한 데이터베이스로 구축하고자 하는 발상 HTML 요소는 non-semetic 요소, semantic 요소로 구분할 수 있다. non-semantic 요소: div, span 등이 있으며 이들 태그는 content에 대하여 어떤 설명도 하지 않는다.semantic 요소: form, table, img 등이 있으며 이들 태그는 content의 의미를 명확히 설명한다. 4. HTML5 Tag - Basic 문서 형식 정의 tag HTML5 1&lt;!DOCTYPE html&gt; html tag html 태그는 모든 HTML 요소의 부모 요소이며 웹페이지에 단 하나만 존재한다. 즉, 모든 요소는 html 요소의 자식 요소이며 html 요소 내부에 기술해야한다.단, 1&lt;!DOCTYPE html&gt; 는 예외 head tag head 요소는 메타데이터를 포함하기 위한 요소 1.1 title tag title 요소는 문서의 제목을 정의한다. 정의된 제목은 브라우저의 탭에 표시된다. 1.2 style tag style 요소에는 HTML 문서를 위한 sytle 정보를 정의한다. 1.3 link tag link 요소에는 외부 리소스와의 연계 정보를 정의한다. 주로 HTML과 외부 CSS 파일을 연계에 사용된다. 1.4 script tag script 요소에는 client-side javascript를 정의한다. 1&lt;script src=&quot;main.js&quot;&gt;&lt;/script&gt; 1.5 meta tag meta 요소는 description, keytwords, author, 기타 메타데이터 정의에 사용된다. 메타데이터는 브라우저, 검색엔진(keywords)등에 의해 사용된다.charset 어브리뷰트는 브라우저가 사용할 문자셋을 정의한다. 1&lt;meta charset=&quot;utf-8&quot;&gt; SEO(검색엔진 최적화)를 위해 검색엔진이 사용할 keywords를 정의한다. 1&lt;meta name=&quot;keywords&quot; content=&quot;HTML, CSS, XML, XHTML, JavaScript&quot;&gt; 웹페이지의 설명을 정의한다. 1&lt;meta name=&quot;description&quot; content=&quot;Web tutorials on HTML and CSS&quot;&gt; 웹페이지의 저자를 명기한다. 1&lt;meta name=&quot;author&quot; content=&quot;John Doe&quot;&gt; 웹페이지를 30초 마다 Refresh 한다. 1&lt;meta http-equiv=&quot;refresh&quot; content=&quot;30&quot;&gt; body tag body tag는 HTML 문서의 내용을 나타내며 웹페이지에 단 하나만 존재한다.메타데이터를 제외한 웹페이지를 구성하는 대부분의 요소가 body 요소내에 기술된다. 123&lt;body&gt; Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.&lt;/body&gt; 메타데이터: 메타데이터(metadata)는 데이터(data)에 대한 데이터이다. 이렇게 흔히들 간단히 정의하지만 엄격하게는, Karen Coyle에 의하면 “어떤 목적을 가지고 만들어진 데이터 (Constructed data with a purpose)”라고도 정의한다. SPA: single page application","link":"/2021/04/12/html5-day-1/"},{"title":"html5-day-2","text":"HTML5 Tag - LinkHTML의 핵심 개념인 HyperLinkHyperText의 Hyper는 컴퓨터 용어로서 텍스트 등의 정보가 동일 선상에 있는것이 아니라 다중으로 연결되어 있는 상태를 의미한다.이것은 HTML의 가장 중요한 특징인 Link의 개념과 연결되는데 기존 문서난 텍스트의 선형성, 고정성의 제약에서 벗어나 사용자가 원하는 순서대로 원하는 정보를 취득할 수 있는 기능을 제공한다.한 텍스트에서 다른 텍스트로 건너 뛰어 읽을 수 있는 이 기능을 하이퍼링크(hyperlink) 라 한다. 123456&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;body&gt; &lt;a href=&quot;http://www.google.com&quot;&gt;Visit googole.com!&lt;/a&gt; &lt;/body&gt;&lt;/html&gt; Visit googole.com! 1. href 어트리뷰트href 어트리뷰트는 이동하고자 하는 파일의 위치(경로)를 값으로 받는다. 경로(path)란 파일 시스템 상에서 특정 파일의 위치를 의미한다. 1.1 디렉터리(Directory)디렉터리는 파일과 다른 디렉터리를 갖는 파일 시스템 내의 존재물로서 폴더라고도 불린다. 루트디렉터리파일 시스템 계층 구조 상의 최상위 디렉터리 Unix: / Window: C:\\ 홈 디렉터리시스템의 사용자에게 각각 할당된 개별 디렉터리이다. Unix: /Users/{계정명} Windows: C:\\Users{계정명} 작업디렉터리작업중인 파일의 위치한 디렉터리이다. ./ 부모 디렉터리작업 디렉터리의 부모 디렉토리이다. ../ 1.2 파일 경로(File path)파일 경로는 파일 시스템에서 파일의 위치를 나타내는 방법이다. 경로에는 절대경로와 상대경로가 있다. 절대경로(Absolute path)현재 작업 디렉터리와 관계없이 특정 파일의 절대적인 위치를 가리킨다. 루트 디렉터리를 기준으로 파일의 위치를 나타낸다. http://www.test.com/index.html /Users/img/testImage.png C:\\users\\img\\testImage.png /index.html 상대경로(Relative path) 현재 작업 디렉터리를 기준으로 특정 파일의 상대적인 위치를 가리킨다. ./index.html ../dist/index.js ../../dist/index.js index.html html/index.html href 어트리뷰트에 사용 가능한 값은 아래와 같다. Value Description 절대 URL 웹사이트 URL(href=”https://wontaejang.github.io/&quot;) 상대 URL 자신의 위치를 기준으로 한 대상의 URL (href=”html/about”) fragment identifier 페이지 내의 특정 id를 갖는 요소의 링크 (href=”#top”) 메일 mailto: script href=”javascript:alert(“Hello World”);” 1234567891011&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;body&gt; &lt;a href=&quot;https://www.google.com&quot;&gt;URL&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;html/index.html&quot;&gt;Local file&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;file/test.pdf&quot; download&gt;Download file&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;#top&quot;&gt;fragment identifier&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;mailto:someone@example.com?Subject=Hello again&quot;&gt;Send Mail&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;javascript:alert('Hello World');&quot;&gt;Javascript&lt;/a&gt; &lt;/body&gt;&lt;/html&gt; URL Local file Download file fragment identifier Send Mail Javascript 2. target 어트리뷰트target 어트리뷰트는 링크를 클릭했을 때 윈도우를 어떻게 오픈할 지를 지정한다. Value Description _self 링크를 클릭했을 때 연결문서를 현재 윈도우에서 오픈한다(기본 값) _blank 링크를 클릭했을 때 연결문서를 새로운 윈도우나 탭에서 오픈한다 123456&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;body&gt; &lt;a href=&quot;http://www.google.com&quot; target=&quot;_blank&quot;&gt;Visit google!&lt;/a&gt; &lt;/body&gt;&lt;/html&gt;","link":"/2021/04/13/html5-day-2/"},{"title":"html5-day-3","text":"HTML5 Tag - List &amp; Table목록(list)와 표(Table)형식 표현을 위한 태그1. 목록(List)1.1 순서없는 목록 (Unordered List)1234567891011&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;body&gt; &lt;h2&gt;순서없는 목록 (Unordered List)&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;Coffee&lt;/li&gt; &lt;li&gt;Tea&lt;/li&gt; &lt;li&gt;Milk&lt;/li&gt; &lt;/ul&gt; &lt;/body&gt;&lt;/html&gt; 순서없는 목록 (Unordered List) Coffee Tea Milk 1.2 순서있는 목록(Ordered List)1234567891011&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;body&gt; &lt;h2&gt;순서있는 목록 (Ordered List)&lt;/h2&gt; &lt;ol&gt; &lt;li&gt;Coffee&lt;/li&gt; &lt;li&gt;Tea&lt;/li&gt; &lt;li&gt;Milk&lt;/li&gt; &lt;/ol&gt; &lt;/body&gt;&lt;/html&gt; 순서있는 목록 (Ordered List) Coffee Tea Milk type 어트리뷰트를 사용하여 순서를 나타내는 문자를 지정할 수 있다. Value Description “1” 숫자 (기본값) “A” 대문자 알파벳 “a” 소문자 알파벳 “I” 대문자 로마숫자 “i” 소문자 로마숫자 12345&lt;ol type=&quot;I&quot;&gt; &lt;li value=&quot;2&quot;&gt;Coffee&lt;/li&gt; &lt;li value=&quot;4&quot;&gt;Tea&lt;/li&gt; &lt;li&gt;Milk&lt;/li&gt;&lt;/ol&gt; Coffee Tea Milk start 어트리뷰트로 리스트의 시작값을 지정할 수 있다. 12345&lt;ol start=&quot;3&quot;&gt; &lt;li&gt;Coffee&lt;/li&gt; &lt;li&gt;Tea&lt;/li&gt; &lt;li&gt;Milk&lt;/li&gt;&lt;/ol&gt; Coffee Tea Milk reversed 어트리뷰트를 지정하면 리스트의 순서값을 역으로 표현한다. 12345&lt;ol reversed&gt; &lt;li&gt;Coffee&lt;/li&gt; &lt;li&gt;Tea&lt;/li&gt; &lt;li&gt;Milk&lt;/li&gt;&lt;/ol&gt; Coffee Tea Milk 1.3 중첩 목록12345678910111213141516&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;body&gt; &lt;h2&gt;중첩 목록&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;Coffee&lt;/li&gt; &lt;li&gt;Tea &lt;ol&gt; &lt;li&gt;Black tea&lt;/li&gt; &lt;li&gt;Green tea&lt;/li&gt; &lt;/ol&gt; &lt;/li&gt; &lt;li&gt;Milk&lt;/li&gt; &lt;/ul&gt; &lt;/body&gt;&lt;/html&gt; 중첩 목록 Coffee Tea Black tea Green tea Milk 2. 테이블표(table)를 만들 때 사용하는 태그이다. 과거에는 테이블 태그를 사용하여 레이아웃을 구성하기도 하였으나 모던 웹에서는 주로 공간분할 태그인 div 태그를 사용하여 레이아웃을 구성한다. tag Description table 표를 감싸는 태그 tr 표 내부의 행 (table row) th 행 내부의 제목 셀(table heading) td 행 내부의 일반 셀(table data) 123456789101112131415161718192021222324252627&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;body&gt; &lt;table border=&quot;1&quot;&gt; &lt;tr&gt; &lt;th&gt;First name&lt;/th&gt; &lt;th&gt;Last name&lt;/th&gt; &lt;th&gt;Score&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Jill&lt;/td&gt; &lt;td&gt;Smith&lt;/td&gt; &lt;td&gt;50&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Eve&lt;/td&gt; &lt;td&gt;Jackson&lt;/td&gt; &lt;td&gt;94&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;John&lt;/td&gt; &lt;td&gt;Doe&lt;/td&gt; &lt;td&gt;80&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/body&gt;&lt;/html&gt; First name Last name Score Jill Smith 50 Eve Jackson 94 John Doe 80 테이블 태그의 어트리뷰트는 아래와 같다. attribute Description border 표 테두리 두께 지정 rowspan 해당 셀이 점유하는 행의 수 지정 colspan 해당 셀이 점유하는 열의 수 지정 12345678910111213141516171819202122232425262728293031323334353637383940414243&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;style&gt; table, th, td { border: 1px solid black; border-collapse: collapse; } th, td { padding: 15px; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;h2&gt;2개의 culumn을 span&lt;/h2&gt; &lt;table&gt; &lt;tr&gt; &lt;th&gt;Name&lt;/th&gt; &lt;th colspan=&quot;2&quot;&gt;Telephone&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Bill Gates&lt;/td&gt; &lt;td&gt;555 77 854&lt;/td&gt; &lt;td&gt;555 77 855&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;h2&gt;2개의 row를 span&lt;/h2&gt; &lt;table&gt; &lt;tr&gt; &lt;th&gt;Name:&lt;/th&gt; &lt;td&gt;Bill Gates&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th rowspan=&quot;2&quot;&gt;Telephone:&lt;/th&gt; &lt;td&gt;555 77 854&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;555 77 855&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/body&gt;&lt;/html&gt; table, th, td { border: 1px solid black; border-collapse: collapse; } th, td { padding: 15px; } 2개의 culumn을 span Name Telephone Bill Gates 555 77 854 555 77 855 &lt;h2&gt;2개의 row를 span&lt;/h2&gt; &lt;table&gt; &lt;tr&gt; &lt;th&gt;Name:&lt;/th&gt; &lt;td&gt;Bill Gates&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th rowspan=&quot;2&quot;&gt;Telephone:&lt;/th&gt; &lt;td&gt;555 77 854&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;555 77 855&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;","link":"/2021/04/14/html5-day-3/"},{"title":"check a file exists at a URL(ASP.NET)","text":"web resource를 가져오기 전 HttpWebRequest Class를 이용하여 Head 정보만 가져온다. 123456789101112131415161718192021222324252627string url = &quot;https://www.domain.com/img/test.png&quot;;WebRequest webRequest = WebRequest.Create(url);webRequest.Method = &quot;HEAD&quot;;try{ using (HttpWebResponse response = (HttpWebResponse)webRequest.GetResponse()) { if (response.StatusCode.ToString() == &quot;OK&quot;) { //YOUR_CODE } }}catch(WebException ex){ // error}finally{ // Don't forget to close your response if(response != null) { response.Close(); }} 추가로 일반적인 file path일 경우 1if(File.Exist(path))","link":"/2021/04/19/check-a-file-exists-at-a-URL-ASP-NET/"},{"title":"html5-day-4","text":"HTML5 Tag - Image &amp; Multimedia이미지의 표현과 동영상, 음악 등 멀티미디어를 지원하는 태그1. 이미지웹페이지에 이미지를 삽입하는 경우, img tag를 사용한다. attribute Description src 이미지 파일 경로 alt 이미지 파일이 없을 경우 표시되는 문장 width 이미지의 너비 (CSS에서 지정하는 것이 일반적 height 이미지의 높이 (CSS에서 지정하는 것이 일반적) 1234567&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;body&gt; &lt;img src=&quot;img/cat.png&quot; alt=&quot;cat&quot; width=&quot;100&quot;&gt; &lt;img src=&quot;img/catcat.gif&quot; alt=&quot;이미지가 없습니다.&quot;&gt; &lt;/body&gt;&lt;/html&gt; 2. 미디어2.1 audioaudio 태그는 HTML5에서 새롭게 추가된 태그이다. IE8 이하에서는 사용할 수 없다. attribute Description src 음악 파일 경로 preload 재생 전에 음악 파일을 모두 불러올 것인지 지정 autoplay 음악 파일을 자동 재생 개시할 것인지 지정 loop 음악을 반복할 것인지 지정 controls 음악 재생 도구를 표시할 것인지 지정. 재생 도구의 외관은 브라우저마다 차이가 있다. 123456&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;body&gt; &lt;audio src=&quot;/audio/test.mp3&quot; controls&gt;&lt;/audio&gt; &lt;/body&gt;&lt;/html&gt; 2.2 비디오video 태그는 HTML5에서 새롭게 추가된 태그이다. IE8 이하에서는 사용할 수 없다. attribute Description src 동영상 파일 경로 poster 동영상 준비 중에 표시될 이미지 파일 경로 preload 재생 전에 동영상 파일을 모두 불러올 것인지 지정 autoplay 동영상 파일을 자동 재생 개시할 것인지 지정(Chrome의 경우 mute를 설정해야지만 재생가능) loop 동영상을 반복할 것인지 지정 controls 동영상 재생도구를 표시할 것인지 지정, 재생도구의 외관은 브라우저마다 차이가 있다. width 동영상의 너비를 지정 height 동영상의 높이를 지정 12345&lt;video width=&quot;320&quot; height=&quot;240&quot; controls&gt; &lt;source src=&quot;movie.mp4&quot; type=&quot;video/mp4&quot;&gt; &lt;source src=&quot;movie.ogg&quot; type=&quot;video/ogg&quot;&gt;Your browser does not support the video tag.&lt;/video&gt;","link":"/2021/04/17/html5-day-4/"},{"title":"html5-day-6","text":"HTML5 Tag - Structure웹페이지의 레이아웃을 구성하기 위해 공간을 분할하는 태그웹페이지의 레이아웃을 구성하기 위해서 공간을 분할할 필요가 있다. 공간을 분할할 수 있는 태그는 div, span, table 등이 있는데, 과거에는 table 태그를 사용하여 레이아웃을 구성하기도 하였으나 모던 웹에서는 주로 div를 사용하여 레이아웃을 구성한다. 그런데 div태그는 의미론적으로 어떠한 의미도 가지고 있지 않기 때문에 아래와 같이 HTML5에서 새롭게 추가된 시맨틱 태그를 사용하는 것이 더 나은 방법이나 IE에서 작동하지 않기 때문에 주의가 필요하다. tag Description header 헤더를 의미 nav 네비게이션을 의미 aside 사이드에 위치하는 공간을 의미 section 분문의 여러 내용(article)을 포함하는 공간을 의미 article 본문의 주 내용이 들어가는 공간을 의미 footer 바닥을 의미","link":"/2021/04/19/html5-day-6/"},{"title":"html5-day-5","text":"HTML5 Tag - Forms사용자와의 커뮤니케이션을 위한 폼 태그1.formform 태그는 사용자가 입력한 데이터를 수집하기 위해 사용되며 input, textarea, button, select, checkbox, rado button, submit button 등의 입력 양식 태그를 포함할 수 있다. 12345&lt;form&gt;...form elements (input, checkbox, radio button, submit button...)...&lt;/form&gt; attribute value Description action URL 입력데이터(form data)가 전송될 URL 지정 method get/post 입력 데이터(form data)전달 방식 지정 GET과 POST는 HTTP프로토콜을 이용해서 사용자 입력 데이터를 서버에 전달하는 방식을 나타내며 HTTP request method라 한다. Get GET 방식은 전송 URL에 입력데이터를 쿼리스트링으로 보내는 방식이다.예) http://testURL.com/id=4444&amp;pw=1234 전송 URL 바로 뒤에 ‘?’를 통해 데이터의 시작을 알려주고, key-value형태의 데이터를 추가한다. 1개 이상의 전송데이터는 ‘&amp;’로 구분한다. URL에 전송 데이터가 모두 노출되기 때문에 보안에 문제가 있으며 전송할 수 있는 데이터의 한계가 있다. (최대 255자). REST API에서 GET 메소드는 모든 또는 특정 리소스의 조회를 요청한다. POST POST 방식은 Request Body에 담아 보내는 방식이다.URL에 전송 데이터가 모두 노출되지 않지만 GET에 비해 속도가 느리다.REST API에서 POST 메소드는 특정 리소스의 생성을 요청한다. 12345678910&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;body&gt; &lt;form action=&quot;https://wontaejang.github.io/&quot; method=&quot;get&quot;&gt; ID: &lt;input type=&quot;text&quot; name=&quot;id&quot; value=&quot;1&quot;&gt;&lt;br&gt; username: &lt;input type=&quot;text&quot; name=&quot;username&quot; value=&quot;WT.Jang&quot;&gt;&lt;br&gt; &lt;input type=&quot;submit&quot; value=&quot;Submit&quot;&gt; &lt;/form&gt; &lt;/body&gt;&lt;/html&gt; ID: username: submit button이 클릭되면 input 태그에 입력된 데이터가 form 태그의 method어트리뷰트에 지정된 방식으로 action 어트리뷰트에 지정된 서버측의 처리 로직에 전달 된다. 2.inputinput 태그는 form 태그 중에서 가장 중요한 태그로 사용자로부터 데이터를 입력받기위해 사용된다.input 태그는 다양한 종류가 있는데 type 어트리뷰트에 의해 구분된다. form 태그 내에 존재하여야 입력 데이터를 전송할 수 있으나 ajax를 사용할 시에는 form 태그 내에 존재하지 않아도 된다. 서버에 전송되는 데이터는 name 어트리뷰터를 키로, value 어트리뷰트를 값으로하여 key = value의 형태로 전송된다. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;body&gt; &lt;h3&gt;button&lt;/h3&gt; &lt;input type=&quot;button&quot; value=&quot;Click me&quot; onclick=&quot;alert('Hello world!')&quot;&gt; &lt;hr&gt; &lt;h3&gt;checkbox&lt;/h3&gt; &lt;input type=&quot;checkbox&quot; name=&quot;fruit1&quot; value=&quot;apple&quot; checked&gt; 사과&lt;br&gt; &lt;input type=&quot;checkbox&quot; name=&quot;fruit2&quot; value=&quot;grape&quot;&gt; 포도&lt;br&gt; &lt;input type=&quot;checkbox&quot; name=&quot;fruit3&quot; value=&quot;peach&quot;&gt; 복숭아&lt;br&gt; &lt;hr&gt; &lt;h3&gt;color&lt;/h3&gt; &lt;input type=&quot;color&quot; name=&quot;mycolor&quot;&gt; &lt;hr&gt; &lt;h3&gt;date&lt;/h3&gt; &lt;input type=&quot;date&quot; name=&quot;birthday&quot;&gt; &lt;hr&gt; &lt;h3&gt;datetime&lt;/h3&gt; &lt;input type=&quot;datetime&quot; name=&quot;birthdaytime&quot;&gt; &lt;hr&gt; &lt;h3&gt;datetime-local&lt;/h3&gt; &lt;input type=&quot;datetime-local&quot; name=&quot;birthdaytime&quot;&gt; &lt;hr&gt; &lt;h3&gt;email&lt;/h3&gt; &lt;input type=&quot;email&quot; name=&quot;useremail&quot;&gt; &lt;hr&gt; &lt;h3&gt;file&lt;/h3&gt; &lt;input type=&quot;file&quot; name=&quot;myfile&quot;&gt; &lt;hr&gt; &lt;h3&gt;hidden&lt;/h3&gt; &lt;input type=&quot;hidden&quot; name=&quot;country&quot; value=&quot;Norway&quot;&gt; hidden filed는 사용자에 표시되지 않는다. &lt;hr&gt; &lt;h3&gt;image&lt;/h3&gt; &lt;input type=&quot;image&quot; src=&quot;img/img_submit.gif&quot; alt=&quot;Submit&quot; width=&quot;48&quot; height=&quot;48&quot;&gt; &lt;hr&gt; &lt;h3&gt;month&lt;/h3&gt; &lt;input type=&quot;month&quot; name=&quot;birthdaymonth&quot;&gt; &lt;hr&gt; &lt;h3&gt;number&lt;/h3&gt; &lt;input type=&quot;number&quot; name=&quot;quantity&quot; min=&quot;2&quot; max=&quot;10&quot; step=&quot;2&quot; value=&quot;2&quot;&gt; &lt;hr&gt; &lt;h3&gt;password&lt;/h3&gt; &lt;input type=&quot;password&quot; name=&quot;pwd&quot;&gt; &lt;hr&gt; &lt;h3&gt;radio&lt;/h3&gt; &lt;input type=&quot;radio&quot; name=&quot;gender&quot; value=&quot;male&quot; checked&gt; 남자&lt;br&gt; &lt;input type=&quot;radio&quot; name=&quot;gender&quot; value=&quot;female&quot;&gt; 여자&lt;br&gt; &lt;hr&gt; &lt;h3&gt;range&lt;/h3&gt; &lt;input type=&quot;range&quot; name=&quot;points&quot; min=&quot;0&quot; max=&quot;10&quot; step=&quot;1&quot; value=&quot;5&quot;&gt; &lt;hr&gt; &lt;h3&gt;reset&lt;/h3&gt; &lt;input type=&quot;reset&quot;&gt; &lt;hr&gt; &lt;h3&gt;search&lt;/h3&gt; &lt;input type=&quot;search&quot; name=&quot;googlesearch&quot;&gt; &lt;hr&gt; &lt;h3&gt;submit&lt;/h3&gt; &lt;input type=&quot;submit&quot; value=&quot;Submit&quot;&gt; &lt;hr&gt; &lt;h3&gt;tel&lt;/h3&gt; &lt;input type=&quot;tel&quot; name=&quot;mytel&quot;&gt; &lt;hr&gt; &lt;h3&gt;text&lt;/h3&gt; &lt;input type=&quot;text&quot; name=&quot;myname&quot;&gt; &lt;hr&gt; &lt;h3&gt;time&lt;/h3&gt; &lt;input type=&quot;time&quot; name=&quot;mytime&quot;&gt; &lt;hr&gt; &lt;h3&gt;url&lt;/h3&gt; &lt;input type=&quot;url&quot; name=&quot;myurl&quot;&gt; &lt;hr&gt; &lt;h3&gt;week&lt;/h3&gt; &lt;input type=&quot;week&quot; name=&quot;week_year&quot;&gt; &lt;/body&gt;&lt;/html&gt; button checkbox 사과 포도 복숭아 color date datetime datetime-local email file hidden hidden filed는 사용자에 표시되지 않는다. image month number password radio 남자 여자 range reset search submit tel text time url week 3. select복수개의 리스트에서 복수개의 아이템을 선택할 때 사용한다. 함께 사용할 수 있는 태그는 다음과 같다. 서버에 전송되는 데이터는 select 요소의 name 어트리뷰트를 키로, option 요소의 value 어트리뷰트를 값으로 하여 key=value의 형태로 전송된다. tag Description select select form 생성 option option 생성 optgroup option을 그룹화한다. 1234567891011121314151617181920212223242526272829&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;body&gt; &lt;select name=&quot;cars1&quot;&gt; &lt;option value=&quot;volvo&quot; selected&gt;Volvo&lt;/option&gt; &lt;option value=&quot;saab&quot; disabled&gt;Saab&lt;/option&gt; &lt;option value=&quot;fiat&quot;&gt;Fiat&lt;/option&gt; &lt;option value=&quot;audi&quot;&gt;Audi&lt;/option&gt; &lt;/select&gt; &lt;select name=&quot;cars2&quot; size=&quot;4&quot; multiple&gt; &lt;option value=&quot;volvo&quot;&gt;Volvo&lt;/option&gt; &lt;option value=&quot;saab&quot;&gt;Saab&lt;/option&gt; &lt;option value=&quot;fiat&quot;&gt;Fiat&lt;/option&gt; &lt;option value=&quot;audi&quot; selected&gt;Audi&lt;/option&gt; &lt;/select&gt; &lt;select name=&quot;cars3&quot;&gt; &lt;optgroup label=&quot;Swedish Cars&quot;&gt; &lt;option value=&quot;volvo&quot;&gt;Volvo&lt;/option&gt; &lt;option value=&quot;saab&quot;&gt;Saab&lt;/option&gt; &lt;/optgroup&gt; &lt;optgroup label=&quot;German Cars&quot; disabled&gt; &lt;option value=&quot;mercedes&quot;&gt;Mercedes&lt;/option&gt; &lt;option value=&quot;audi&quot;&gt;Audi&lt;/option&gt; &lt;/optgroup&gt; &lt;/select&gt; &lt;/body&gt;&lt;/html&gt; Volvo Saab Fiat Audi Volvo Saab Fiat Audi Volvo Saab Mercedes Audi 4. textareatextarea 태그는 여러 줄의 글자를 입력할 때 사용한다. 123456&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;body&gt; &lt;textarea name=&quot;message&quot; rows=&quot;10&quot; cols=&quot;30&quot;&gt;Write something here&lt;/textarea&gt; &lt;/body&gt;&lt;/html&gt; Write something here 5. buttonbutton 태그는 클릭할 수 있는 버튼을 생성한다. &lt;input type=&quot;button&quot;&gt; 과 유사하지만 input 태그는 빈 태그인 반면 button 태그는 그렇지 않다. 따라서 button 요소에는 텍스트나 이미지 같은 콘텐츠를 사용할 수 있다. type 어트리뷰트는 반드시 지정하는 것이 바람직하며 어트리뷰트 값으로 button, reset, submit를 지정할 수 있다. 12345678&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;body&gt; &lt;button type=&quot;button&quot; onclick=&quot;alert('Hello World!')&quot;&gt;Click Me!&lt;/button&gt; &lt;input type=&quot;button&quot; value=&quot;Click Me!&quot; onclick=&quot;alert('Hello world!')&quot;&gt; &lt;/body&gt;&lt;/html&gt; Click Me! button 태그는 어트리뷰트만을 받아들이는 input 태그와 달리 콘텐츠로 문자열은 물론 HTML 요소를 받을 수도 있다는 장점이 있다. submit의 경우 브라우저마다 다를 수 있다. 1&lt;button type=&quot;submit&quot; name=&quot;myButton&quot; value=&quot;foo&quot;&gt;Click me&lt;/button&gt; 6.fieldset / legendfieldset 태그는 관련된 입력 양식들을 그룹화 할 때 사용한다. legend 태그는 fieldset 태그 내에서 사용되야 하며 그룹화된 fieldset의 제목을 정의한다. 12345678910111213&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;/head&gt; &lt;body&gt; &lt;fieldset&gt; &lt;legend&gt;Login&lt;/legend&gt; Username &lt;input type=&quot;text&quot; name=&quot;username&quot;&gt; Password &lt;input type=&quot;text&quot; name=&quot;password&quot;&gt; &lt;/fieldset&gt; &lt;/body&gt;&lt;/html&gt; Login Username Password","link":"/2021/04/18/html5-day-5/"},{"title":"css3-day-1","text":"CSS3 SyntaxCSS 기본 문법CSS(Cascading Style Sheets)는 HTML이나 XML과 같은 구조화 된 문서(Document)를 화면, 종이 등에 어떻게 렌더링할 것인지를 정의하기 위한 언어이다. 즉, CSS는 HTML의 각 요소(Element)의 style(design, layout etc)을 정의하여 화면(Screen)등에 어떻게 렌더링하면 되는지 브라우저에게 설명하기 위한 언어이다. HTML5 이전 버전의HTML에는 style을 컨트롤할 수 있는 태그(font, center)가 존재하여 CSS가 없이도 어느정도의 스타일 표현이 가능하였으나 정보와 구조를 담당하는 HTML의 본연의 역할과 동떨어진 기능까지 추가됨으로서 복잡하고 혼란스러운 언어가 되어 버렸다. HTML5에서는 HTML는 정보와 구조화, CSS는 styling의 정의라는 본연의 임무에 충실한 명확한 구분이 이루어졌다. HTML과 CSS는 각자의 문법을 갖는 별개의 언어이며 HTML은 CSS를 포함할 수 있다. 그러나 HTML없이 단독으로 존재하는 CSS는 의미가 없다. 새로운 언어를 학습할 때에는 먼저 용어에 익숙해져야 할 필요가 있다. CSS3의 용어에 대해 알아보도록 하자. 셀렉터 (Selector, 선택자) CSS는 HTML 요소의 style(design, layout etc)을 정의하는데 사용된다. 이를 위해서 선행되어야하는 것은 스타일을 적용하고자 하는 HTML 요소를 선택할 수 있어야 한다. 셀렉터는 스타일을 적용하고자 하는 HTML요소를 선택하기 위해 CSS에서 제공하는 수단이다. 위와 같은 구문을 Rule Set(또는 Rule)이라 하며 셀렉터에 의해 선택된 특정 HTML 요소를 어떻게 렌더링(Rendering)할 것인지 브라우저에 지시하는 역할을 한다. 위의 CSS Rule set은 HTML 문서에 속해 있는 셀렉터를 통해 모든 h1 요소를 선택한 후 선택된 h1 요소의 스타일을 선언 블록에서 정의하고 있다. 이와 같은 Rule Set의 집합을 스타일시트(Style Sheet)라 한다. 2. 프로퍼티 (Property / 속성)셀릭터로 HTML 요소를 선택하고 {}내에 프로퍼티(속성)와 값을 지정하는 거으로 다양한 style을 정의 할 수 있다. 프로퍼티는 표준 스펙으로 이미 지정되어 있는 것을 사용하여야 하며 사용자가 임의로 정의할 수 없다. 여러개의 프로퍼티를 연속해서 지정할 수 있으며 세미콜론(;)으로 구분한다. 1234p { color: ...; font-size: ...;} 3. 값 (Value / 속성값)셀렉터로 지정한 HTML 요소에 style을 적용하기 위해 프로퍼티를 사용했다. 프로퍼티의 값은 해당 프로퍼티에 사용할 수 있는 값을 “키워드”나 “크기 단위” 또는 “색상 표현 단위”등의 특정 단위로 지정하여야 한다. 1234p { color: orange; font-size: 16px;} 4. HTML과 CSS의 연동HTML은 CSS를 포함할 수 있다. CSS를 가지고 있지 않은 HTML은 브라우저에서 기본으로 적용하는 CSS(user agent stylesheet)에 의해 렌더링된다. 4.1 Link styleHTML에서 외부에 있는 CSS 파일을 로드하는 방식이다. 가장 일반적으로 사용된다. 12345678910&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;css/style.css&quot;&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;Hello World&lt;/h1&gt; &lt;p&gt;This is a web page.&lt;/p&gt; &lt;/body&gt;&lt;/html&gt; 12h1 { color: red; }p { background: blue; } 4.2 Embedding styleHTML 내부에 CSS를 포함시키는 방식이다. 매우 간단한 웹페이지의 경우는 문제될 것이 없겠지만 Link style을 사용하는 편이 좋다. HTML과 CSS는 서로 역할이 다르므로 다른 파일로 구분되어 작성하고 관리되는 것이 바람직하다. 12345678910111213&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;style&gt; h1 { color: red; } p { background: aqua; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;Hello World&lt;/h1&gt; &lt;p&gt;This is a web page.&lt;/p&gt; &lt;/body&gt;&lt;/html&gt; 4.3 Inline styleHTML요소의 style 프로퍼티에 CSS를 기술하는 방식이다. JavaScript가 동적으로 CSS를 생성할 때 사용하는 경우가 있다. 하지만 일반적인 경우 Link style을 사용하는 편이 좋다. 1234567&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;body&gt; &lt;h1 style=&quot;color: red&quot;&gt;Hello World&lt;/h1&gt; &lt;p style=&quot;background: aqua&quot;&gt;This is a web page.&lt;/p&gt; &lt;/body&gt;&lt;/html&gt; Hello World This is a web page. 5. Reset CSS 사용하기모든 웹 브라우저는 디폴트 스타일(브라우저가 내장하고 있는 기본 스타일)을 가지고 있어 CSS가 없어도 작동한다. 그런데 웹브라우저에 따라 디폴트 스타일이 상이하고 지원하는 tag나 style도 제각각이어서 주의가 필요하다. Reset CSS는 기본적인 HTML 요소의 CSS를 초기화하는 용도로 사용한다. 즉, 브라우저 별로 제각각인 디폴트 스타일을 하나의 스타일로 통일시켜 주는 역할을 한다. 자주 사용되는 Reset CSS는 다음과 같다. Eric Meyer’s reset normalize.css 6. CSS Versions Version Year CSS3 2005 CSS2 1998 CSS1 1996 참조 사이트: https://poiemaweb.com/css3-syntax","link":"/2021/04/20/css3-day-1/"},{"title":"css3-day-2","text":"CSS3 SelectorSelectorCSS(Cascading Style Sheets)는 HTML 요소(Element)의 style(design, layout etc)을 정의한다. 그리하려면 HTML이 존재하여야 하고 또한 style을 적용하고자하는 HTML 요소를 특정할 필요가 있다. 이러한 목적으로 사용되는 것이 셀렉터(Selector)이다. 즉, style을 적용하고자 하는 HTML 요소를 셀렉터로 특정하고 선택된 요소에 스타일을 정의하는 것이다. 출처: https://www.w3schools.com/css/css_syntax.asp 12345678910111213 &lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; h1 { color: red; } p { color: blue; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;Hello World!&lt;/h1&gt; &lt;p&gt;This paragraph is styled with CSS.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; Hello World! This paragraph is styled with CSS. 복수개의 셀렉터를 연속하여 지정할 수 있으며 쉼표(,)로 구분한다. 1h1, p { color: red; } 1. 전체 셀렉터 (Universal Selector) 패턴 Description * HTML 문서 내의 모든 요소를 선택한다. html 요소를 포함한 모든 요소가 선택된다. (head 요소도 포함된다) 1234567891011121314151617&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; /* 모든 요소를 선택 */ * { color: red; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;Heading&lt;/h1&gt; &lt;div&gt; &lt;p&gt;paragraph 1&lt;/p&gt; &lt;p&gt;paragraph 2&lt;/p&gt; &lt;/div&gt; &lt;p&gt;paragraph 3&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; result 2. 태그 셀렉터 (Type Selector) 패턴 Description 태그명 지정된 태그명을 가지는 요소를 선택한다. 지정된 태그명을 가지는 요소를 선택한다. 1234567891011121314151617&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; /* 모든 p 태그 요소를 선택 */ p { color: red; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;Heading&lt;/h1&gt; &lt;div&gt; &lt;p&gt;paragraph 1&lt;/p&gt; &lt;p&gt;paragraph 2&lt;/p&gt; &lt;/div&gt; &lt;p&gt;paragraph 3&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; result 3. ID 셀렉터 (ID Selector) 패턴 Description #id 어트리뷰트 값 id 어프리뷰트 값을 지정하여 일치하는 요소를 선택한다. id 어트리뷰트 값은 중복될 수 없는 유일한 값이다. 1234567891011121314151617&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; /* id 어트리뷰트 값이 p1인 요소를 선택 */ #p1 { color: red; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;Heading&lt;/h1&gt; &lt;div class=&quot;container&quot;&gt; &lt;p id=&quot;p1&quot;&gt;paragraph 1&lt;/p&gt; &lt;p id=&quot;p2&quot;&gt;paragraph 2&lt;/p&gt; &lt;/div&gt; &lt;p&gt;paragraph 3&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; result 4. 클래스 셀렉터 (Class Selector) 패턴 Description .class 어트리뷰트 값 class 어트리뷰트 값을 지정하여 일치하는 요소를 선택한다. class 어트리뷰트 값은 중복될 수 있다. 1234567891011121314151617181920&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; /* class 어트리뷰트 값이 container인 모든 요소를 선택 */ /* color 어트리뷰트는 자식 요소에 상속된다. */ .container { color: red; } /* not supported in IE */ #p2 { color: initial; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;Heading&lt;/h1&gt; &lt;div class=&quot;container&quot;&gt; &lt;p id=&quot;p1&quot;&gt;paragraph 1&lt;/p&gt; &lt;p id=&quot;p2&quot;&gt;paragraph 2&lt;/p&gt; &lt;/div&gt; &lt;p&gt;paragraph 3&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; result HTML 요소에 class 어트리뷰트 값은 공백으로 구분하여 여러 개 지정할 수 있다. 아래와 같이 클래스 셀렉터를 사용하여 미리 스타일을 정의해 두고, HTML 요소는 이미 정의되어 있는 클래스를 지정하는 것으로 필요한 스타일을 지정할 수 있다. 이것은 재사용의 측면에서 유용하다. 1234567891011121314151617181920&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; /* class 어트리뷰트 값이 text-center인 모든 요소를 선택 */ .text-center { text-align: center; } /* class 어트리뷰트 값이 text-large인 모든 요소를 선택 */ .text-large { font-size: 200%; } /* class 어트리뷰트 값이 text-red인 모든 요소를 선택 */ .text-red { color: red; } /* class 어트리뷰트 값이 text-blue인 모든 요소를 선택 */ .text-blue { color: blue; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;p class=&quot;text-center&quot;&gt;Center&lt;/p&gt; &lt;p class=&quot;text-large text-red&quot;&gt;Large Red&lt;/p&gt; &lt;p class=&quot;text-center text-large text-blue&quot;&gt;Center Large Blue&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; result 5. 어트리뷰트 셀렉터 (Attribute Selector) 패턴 Description 셀렉터[어트리뷰트] 지정된 어트리뷰트를 갖는 모든 요소를 선택한다. 1234567891011121314&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; /* a 요소 중에 href 어트리뷰트를 갖는 모든 요소 */ a[href] { color: red; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;a href=&quot;http://www.poiemaweb.com&quot;&gt;poiemaweb.com&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;http://www.google.com&quot; target=&quot;_blank&quot;&gt;google.com&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;http://www.naver.com&quot; target=&quot;_top&quot;&gt;naver.com&lt;/a&gt;&lt;/body&gt;&lt;/html&gt; result 패턴 Description 셀렉터[어트리뷰트=”값”] 지정된 어트리뷰트를 가지며 지정된 값과 어트리뷰트의 값이 일치하는 모든 요소를 선택한다. 1234567891011121314&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; /* a 요소 중에 target 어트리뷰트의 값이 &quot;_blank&quot;인 모든 요소 */ a[target=&quot;_blank&quot;] { color: red; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;a href=&quot;https://wontaejang.github.io&quot;&gt;wontaejang.github.io&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;http://www.google.com&quot; target=&quot;_blank&quot;&gt;google.com&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;http://www.naver.com&quot; target=&quot;_top&quot;&gt;naver.com&lt;/a&gt;&lt;/body&gt;&lt;/html&gt; result 패턴 Description 셀렉터[어트리뷰트~=”값”] 지정된 어트리뷰트의 값이 지정된 값을 (공백으로 분리된) 단어로 포함하는 요소를 선택한다. 123456789101112131415&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; /* h1 요소 중에 title 어트리뷰트 값에 &quot;first&quot;를 단어로 포함하는 요소 */ h1[title~=&quot;first&quot;] { color: red; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h1 title=&quot;heading first&quot;&gt;Heading first&lt;/h1&gt; &lt;h1 title=&quot;heading-first&quot;&gt;Heading-first&lt;/h1&gt; &lt;h1 title=&quot;heading second&quot;&gt;Heading second&lt;/h1&gt; &lt;h1 title=&quot;heading third&quot;&gt;Heading third&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt; result 패턴 Description 셀렉터[어트리뷰트|=”값”] 지정된 어트리뷰트의 값과 일치하거나 지정 어트리뷰트 값 뒤 연이은 하이픈(“값-“)으로 시작하는 요소를 선택한다. 12345678910111213141516&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; /* p 요소 중에 lang 어트리뷰트 값이 &quot;en&quot;과 일치하거나 &quot;en-&quot;로 시작하는 요소 */ p[lang|=&quot;en&quot;] { color: red; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;p lang=&quot;en&quot;&gt;Hello!&lt;/p&gt; &lt;p lang=&quot;en-us&quot;&gt;Hi!&lt;/p&gt; &lt;p lang=&quot;en-gb&quot;&gt;Ello!&lt;/p&gt; &lt;p lang=&quot;us&quot;&gt;Hi!&lt;/p&gt; &lt;p lang=&quot;no&quot;&gt;Hei!&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; result 패턴 Description 셀렉터[어트리뷰트^=”값”] 지정된 어트리뷰트 값으로 시작하는 요소를 선택한다. 12345678910111213&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; /* a 요소 중에 href 어트리뷰트 값이 &quot;https://&quot;로 시작하는 요소 */ a[href^=&quot;https://&quot;] { color: red; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;a href=&quot;https://www.test.com&quot;&gt;https://www.test.com&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;http://www.test.com&quot;&gt;http://www.test.com&lt;/a&gt;&lt;/body&gt;&lt;/html&gt; result 패턴 Description 셀렉터[어트리뷰트$=”값”] 지정된 어트리뷰트 값으로 끝나는 요소를 선택한다. result 패턴 Description 셀렉터[어트리뷰트*=”값”] 지정된 어트리뷰트 값을 포함하는 요소를 선택한다. 1234567891011121314151617&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; /* div 요소 중에서 class 어트리뷰트 값에 &quot;test&quot;를 포함하는 요소 */ div[class*=&quot;test&quot;] { color: red; } /* div 요소 중에서 class 어트리뷰트 값에 &quot;test&quot;를 단어로 포함하는 요소 */ div[class~=&quot;test&quot;] { background-color: yellow; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;first_test&quot;&gt;The first div element.&lt;/div&gt; &lt;div class=&quot;second&quot;&gt;The second div element.&lt;/div&gt; &lt;div class=&quot;test&quot;&gt;The third div element.&lt;/div&gt; &lt;p class=&quot;test&quot;&gt;This is some text in a paragraph.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; result 6. 복합 셀렉터 (Combinator)6.1 후손 셀렉터 (Descendant Combinator)자신의 1level 상위에 속하는 요소를 부모 요소, 1level 하위에 속하는 요소를 자손 요소(자식 요소) 라 한다. 자신보다 n level 하위에 속하는 요소는 후손 요소(하위 요소) 라 한다. 후손 셀렉터는 셀렉터A의 모든 후손(하위) 요소 중 셀렉터B와 일치하는 요소를 선택한다. 1셀렉터A 셀렉터B 123456789101112131415161718&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; /* div 요소의 후손요소 중 p 요소 */ div p { color: red; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;Heading&lt;/h1&gt; &lt;div&gt; &lt;p&gt;paragraph 1&lt;/p&gt; &lt;p&gt;paragraph 2&lt;/p&gt; &lt;span&gt;&lt;p&gt;paragraph 3&lt;/p&gt;&lt;/span&gt; &lt;/div&gt; &lt;p&gt;paragraph 4&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; result 6.2 자식 셀렉터 (Child Combinator)자손 셀렉터는 셀렉터A의 모든 자식 요소중 셀렉터B와 일치하는 요소를 선택한다. 1셀렉터A &gt; 셀렉터B 123456789101112131415161718&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; /* div 요소의 자식요소 중 p 요소 */ div &gt; p { color: red; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;Heading&lt;/h1&gt; &lt;div&gt; &lt;p&gt;paragraph 1&lt;/p&gt; &lt;p&gt;paragraph 2&lt;/p&gt; &lt;span&gt;&lt;p&gt;paragraph 3&lt;/p&gt;&lt;/span&gt; &lt;/div&gt; &lt;p&gt;paragraph 4&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; result 6.3 형제(동위) 셀렉터 (Sibling Combinator)형제(동위) 셀렉터는 형제 관계(동위 관계)에서 뒤에 위치하는 요소를 선택할 때 사용한다. 6.3.1 인접 형제 셀렉터 (Adjacent Sibling Combinator)셀렉터A의 형제 요소 중 셀렉터A 바로 뒤에 위치하는 셀렉터B 요소를 선택한다. A와 B 사이에 다른요소가 존재하면 선택되지 않는다. 1셀렉터A + 셀렉터B 12345678910111213141516171819202122232425262728293031&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; /* p 요소의 형제 요소 중에 p 요소 바로 뒤에 위치하는 ul 요소를 선택한다. */ p + ul { color: red; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;A div element.&lt;/div&gt; &lt;ul&gt; &lt;li&gt;Coffee&lt;/li&gt; &lt;li&gt;Tea&lt;/li&gt; &lt;li&gt;Milk&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The first paragraph.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Coffee&lt;/li&gt; &lt;li&gt;Tea&lt;/li&gt; &lt;li&gt;Milk&lt;/li&gt; &lt;/ul&gt; &lt;h2&gt;Another list&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;Coffee&lt;/li&gt; &lt;li&gt;Tea&lt;/li&gt; &lt;li&gt;Milk&lt;/li&gt; &lt;/ul&gt;&lt;/body&gt;&lt;/html&gt; result 6.3.2 일반 형제 셀렉터 (General Sibling Combinator)셀렉터A의 형제 요소 중 셀렉터A 뒤에 위치하는 셀렉터B 요소를 모두 선택한다. 1셀렉터A ~ 셀렉터B 12345678910111213141516171819202122232425262728293031&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; /* p 요소의 형제 요소 중에 p 요소 뒤에 위치하는 ul 요소를 모두 선택한다.*/ p ~ ul { color: red; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;A div element.&lt;/div&gt; &lt;ul&gt; &lt;li&gt;Coffee&lt;/li&gt; &lt;li&gt;Tea&lt;/li&gt; &lt;li&gt;Milk&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The first paragraph.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Coffee&lt;/li&gt; &lt;li&gt;Tea&lt;/li&gt; &lt;li&gt;Milk&lt;/li&gt; &lt;/ul&gt; &lt;h2&gt;Another list&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;Coffee&lt;/li&gt; &lt;li&gt;Tea&lt;/li&gt; &lt;li&gt;Milk&lt;/li&gt; &lt;/ul&gt;&lt;/body&gt;&lt;/html&gt; result 7. 가상 클래스 셀렉터 (Pseudo-Class Selector)가상 클래스는 요소의 특정 상태에 따라 스타일을 정의할 때 사용된다. 특정 상태란 예를 들어 다음과 같다. 마우스가 올라와 있을때 링크를 방문했을 때와 아직 방문하지 않았을 때 포커스가 들어와 있을 때 이러한 특정 상태에는 원래 클래스가 존재하지 않지만 가상 클래스를 임의로 지정하여 선택하는 방법이다. 가상 클래스는 마침표(.) 대신 콜론(:)을 사용한다. CSS 표준에 의해 미리 정의된 이름이 있기 때문에 임의의 이름을 사용할 수 없다. 123selector:pseudo-class { property: value;} 다음은 div 요소가 hover 상태일 때 (마우스가 올라와 있을 때) background-color를 yellow로 지정하는 예이다. 123456789101112131415&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; /* a 요소가 hover 상태일 때 */ a:hover { color: red; } /* input 요소가 focus 상태일 때 */ input:focus { background-color: yellow; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;a href=&quot;#&quot;&gt;Hover me&lt;/a&gt;&lt;br&gt;&lt;br&gt; &lt;input type=&quot;text&quot; placeholder=&quot;focus me&quot;&gt;&lt;/body&gt;&lt;/html&gt; result 7.1 링크 셀렉터(Link pseudo-classes), 동적 셀렉터(User action pseudo-classes) pseudo-class Description :link 셀렉터가 방문하지 않은 링크일 때 :visited 셀렉터가 방문한 링크일 때 :hover 셀렉터에 마우스가 올라와 있을 때 :active 셀렉터가 클릭된 상태일 때 :focus 셀렉터에 포커스가 들어와 있을 때 1234567891011121314151617181920212223242526272829&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; /* a 요소가 방문하지 않은 링크일 때 */ a:link { color: orange; } /* a 요소가 방문한 링크일 때 */ a:visited { color: green; } /* a 요소에 마우스가 올라와 있을 때 */ a:hover { font-weight: bold; } /* a 요소가 클릭된 상태일 때 */ a:active { color: blue; } /* text input 요소와 password input 요소에 포커스가 들어와 있을 때 */ input[type=text]:focus, input[type=password]:focus { color: red; } &lt;/style&gt; &lt;/head&gt;&lt;body&gt; &lt;a href=&quot;#&quot; target=&quot;_blank&quot;&gt;This is a link&lt;/a&gt;&lt;br&gt; &lt;input type=&quot;text&quot; value=&quot;I'll be red when focused&quot;&gt;&lt;br&gt; &lt;input type=&quot;password&quot; value=&quot;I'll be red when focused&quot;&gt;&lt;/body&gt;&lt;/html&gt; result 7.2 UI 요소 상태 셀렉터(UI element state pseudo-classes) pseudo-class Description :checked 셀렉터가 체크 상태일 때 :enabled 셀렉터가 사용 가능한 상태일 때 :disabled 셀렉터가 사용 불가능한 상태일 때 1234567891011121314151617181920212223242526272829303132&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; /* input 요소가 사용 가능한 상태일 때, input 요소 바로 뒤에 위치하는 인접 형제 span 요소를 선택 */ input:enabled + span { color: blue; } /* input 요소가 사용 불가능한 상태일 때, input 요소 바로 뒤에 위치하는 인접 형제 span 요소를 선택 */ input:disabled + span { color: gray; text-decoration: line-through; } /* input 요소가 체크 상태일 때, input 요소 바로 뒤에 위치하는 인접 형제 span 요소를 선택 */ input:checked + span { color: red; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;input type=&quot;radio&quot; checked=&quot;checked&quot; value=&quot;male&quot; name=&quot;gender&quot;&gt; &lt;span&gt;Male&lt;/span&gt;&lt;br&gt; &lt;input type=&quot;radio&quot; value=&quot;female&quot; name=&quot;gender&quot;&gt; &lt;span&gt;Female&lt;/span&gt;&lt;br&gt; &lt;input type=&quot;radio&quot; value=&quot;neuter&quot; name=&quot;gender&quot; disabled&gt; &lt;span&gt;Neuter&lt;/span&gt;&lt;hr&gt; &lt;input type=&quot;checkbox&quot; checked=&quot;checked&quot; value=&quot;bicycle&quot;&gt; &lt;span&gt;I have a bicycle&lt;/span&gt;&lt;br&gt; &lt;input type=&quot;checkbox&quot; value=&quot;car&quot;&gt; &lt;span&gt;I have a car&lt;/span&gt;&lt;br&gt; &lt;input type=&quot;checkbox&quot; value=&quot;motorcycle&quot; disabled&gt; &lt;span&gt;I have a motorcycle&lt;/span&gt;&lt;/body&gt;&lt;/html&gt; result 7.3 구조 가상 클래스 (Structural pseudo-classes) pseudo-class Description :first-child 셀렉터에 해당하는 모든 요소 중 첫번째 자식인 요소를 선택한다. :last-child 셀렉터에 해당하는 모든 요소 중 마지막 자식인 요소를 선택한다. 12345678910111213141516171819202122232425&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; /* p 요소 중에서 첫번째 자식을 선택 */ p:first-child { color: red; } /* p 요소 중에서 마지막 자식을 선택 */ /* body 요소의 두번째 p 요소는 마지막 자식 요소가 아니다. body 요소의 마지막 자식 요소는 div 요소이다. */ p:last-child { color: blue; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;p&gt;This paragraph is the first child of its parent (body).&lt;/p&gt; &lt;h1&gt;Welcome to My Homepage&lt;/h1&gt; &lt;p&gt;This paragraph is not the first child of its parent.&lt;/p&gt; &lt;div&gt; &lt;p&gt;This paragraph is the first child of its parent (div).&lt;/p&gt; &lt;p&gt;This paragraph is not the first child of its parent.&lt;/p&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; result pseudo-class Description :nth-child(n) 셀렉터에 해당하는 모든 요소 중 앞에서 n 번째 자식인 요소를 선택한다. :nth-last-child(n) 셀렉터에 해당하는 모든 요소중 뒤에서 n번째 자식인 요소를 선택한다. n은 0부터 시작하는 정수이다.|n|2n+1|2n-1|3n-2|3n+1|-n+5||-|—-|—-|—-|—-|—-||0|1|-1|-2|1|5||1|3|1|1|4|4||2|5|3|4|7|3||3|7|5|7|10|2||4|9|7|10|13|1||5|11|9|13|16|0| 0과 음수는 생략되기 때문에 2n+1과 2n-1, 3n-2와 3n+1은 결과적으로 같은 수열을 생성한다. 12345678910111213141516171819202122232425262728293031323334353637383940414243&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; /* ol 요소의 자식 요소인 li 요소 중에서 짝수번째 요소만을 선택 */ ol &gt; li:nth-child(2n) { color: orange; } /* ol 요소의 자식 요소인 li 요소 중에서 홀수번째 요소만을 선택 */ ol &gt; li:nth-child(2n+1) { color: green; } /* ol 요소의 자식 요소인 li 요소 중에서 첫번쨰 요소만을 선택 */ ol &gt; li:first-child { color: red; } /* ol 요소의 자식 요소인 li 요소 중에서 마지막 요소만을 선택 */ ol &gt; li:last-child { color: blue; } /* ol 요소의 자식 요소인 li 요소 중에서 4번째 요소 요소만을 선택 */ ol &gt; li:nth-child(4) { background: brown; } /* ul 요소의 모든 자식 요소 중에서 뒤에서부터 시작하여 홀수번째 요소만을 선택 */ ul &gt; :nth-last-child(2n+1) { color: red; } /* ul 요소의 모든 자식 요소 중에서 뒤에서부터 시작하여 짝수번째 요소만을 선택 */ ul &gt; :nth-last-child(2n) { color: blue; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;ol&gt; &lt;li&gt;Espresso&lt;/li&gt; &lt;li&gt;Americano&lt;/li&gt; &lt;li&gt;Caffe Latte&lt;/li&gt; &lt;li&gt;Caffe Mocha&lt;/li&gt; &lt;li&gt;Caramel Latte&lt;/li&gt; &lt;li&gt;Cappuccino&lt;/li&gt; &lt;/ol&gt; &lt;ul&gt; &lt;li&gt;Espresso&lt;/li&gt; &lt;li&gt;Americano&lt;/li&gt; &lt;li&gt;Caffe Latte&lt;/li&gt; &lt;li&gt;Caffe Mocha&lt;/li&gt; &lt;li&gt;Caramel Latte&lt;/li&gt; &lt;li&gt;Cappuccino&lt;/li&gt; &lt;/ul&gt;&lt;/body&gt;&lt;/html&gt; result pseudo-class Description :first-of-type 셀렉터에 해당하는 요소의 부모 요소의 자식 요소 중 첫번째 등장하는 요소를 선택한다. :last-of-type 셀렉터에 해당하는 요소의 부모 요소의 자식 요소 중 마지막에 등장하는 요소를 선택한다. :nth-of-type(n) 셀렉터에 해당하는 요소의 부모 요소의 자식요소 중 앞에서 n번째에 등장하는 요소를 선택한다. :nth-last-of-type(n) 셀렉터에 해당하는 요소의 부모 요소의 자식 요소 중 뒤에서 n번째에 등장하는 요소를 선택한다. 1234567891011121314151617181920212223242526272829303132&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; /* p 요소의 부모 요소의 자식 요소 중 첫번째 등장하는 p 요소 */ p:first-of-type { color: red; } /* p 요소의 부모 요소의 자식 요소 중 마지막 등장하는 p 요소 */ p:last-of-type { color: blue; } /* p 요소의 부모 요소의 자식 요소 중 앞에서 2번째에 등장하는 p 요소 */ p:nth-of-type(2) { color: green; } /* p 요소의 부모 요소의 자식 요소 중 뒤에서 2번째에 등장하는 p 요소 */ p:nth-last-of-type(2) { color: orange;} /* p 요소 중에서 첫번째 자식을 선택 */ p:first-child { background: brown;} &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;This is a heading&lt;/h1&gt; &lt;p&gt;The first paragraph.&lt;/p&gt; &lt;p&gt;The second paragraph.&lt;/p&gt; &lt;p&gt;The third paragraph.&lt;/p&gt; &lt;p&gt;The fourth paragraph.&lt;/p&gt; &lt;div&gt; &lt;h1&gt;This is a heading&lt;/h1&gt; &lt;p&gt;The first paragraph.&lt;/p&gt; &lt;p&gt;The second paragraph.&lt;/p&gt; &lt;p&gt;The third paragraph.&lt;/p&gt; &lt;p&gt;The fourth paragraph.&lt;/p&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; result 7.4 부정 셀렉터(Negation pseudo-class) pseudo-class Description :not(셀렉터) 셀렉터에 해당하지 않는 모든 요소를 선택한다. 12345678910111213141516&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; /* input 요소 중에서 type 어트리뷰트의 값이 password가 아닌 요소를 선택 */ input:not([type=password]) { background: yellow; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;input type=&quot;text&quot; value=&quot;Text input&quot;&gt; &lt;input type=&quot;email&quot; value=&quot;email input&quot;&gt; &lt;input type=&quot;password&quot; value=&quot;Password input&quot;&gt;&lt;/body&gt;&lt;/html&gt; result 1234567891011121314151617181920212223242526272829303132333435363738&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; body { margin: 0; } div { float: left; width: 32%; height: 200px; background-color: red; /* margin-bottom: 2%; */ color: #fff; font-size: 3em; line-height: 200px; text-align: center; } /* div 요소 중에서 1, 4, 7...번째 등장하는 요소가 아닌 요소만을 선택 */ /* 1, 4, 7... : 공차가 3인 등차수열 */ div:not(:nth-of-type(3n+1)) { margin-left: 2%; } /* div 요소 중에서 4번째 이후 등장하는 요소가 아닌 요소만을 선택 */ div:not(:nth-of-type(n+4)) { margin-bottom: 2%; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;1&lt;/div&gt; &lt;div&gt;2&lt;/div&gt; &lt;div&gt;3&lt;/div&gt; &lt;div&gt;4&lt;/div&gt; &lt;div&gt;5&lt;/div&gt; &lt;div&gt;6&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; result 7.5 정합성 체크 셀렉터(validity pseudo-class) pseudo-class Description :valid(셀렉터) 정합성 검즘이 성공한 input 요소 또는 form 요소를 선택한다. :invaild(셀렉터) 정합성 검증이 실패한 input 요소 또는 form 요소를 선택한다. 1234567891011121314151617181920212223242526272829&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; input[type=&quot;text&quot;]:valid { background-color: greenyellow; } input[type=&quot;text&quot;]:invalid { background-color: red; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;label&gt;입력값이 반드시 필요 &lt;input type=&quot;text&quot; required&gt; &lt;/label&gt; &lt;br&gt; &lt;label&gt;특수문자를 포함하지 않는 4자리 문자 또는 숫자 &lt;input type=&quot;text&quot; value=&quot;ab1!&quot; pattern=&quot;[a-zA-Z0-9]{4}&quot; required&gt; &lt;/label&gt; &lt;br&gt; &lt;label&gt;핸드폰 번호 형식 &lt;input type=&quot;text&quot; value=&quot;010-1111-2222&quot; pattern=&quot;^\\d{3}-\\d{3,4}-\\d{4}$&quot; required&gt; &lt;/label&gt;&lt;/body&gt;&lt;/html&gt; result Browser Support 8. 가상 요소 셀렉터(Pseudo-Element Selector)가상 요소는 요소의 특정 부분에 스타일을 적용하기 위하여 사용된다. 특정 부분이란 예를 들어 다음과 같다. 요소 콘텐츠의 첫글자 또는 첫줄 요소 콘텐츠의 앞 또는 뒤 가상 요소에는 두개의 콜론(::)을 사용한다. CSS 표준에 의해 미리 정의된 이름이 있기 때문에 임의의 이름을 사용할 수 없다. 123selector::pseudo-element { property:value;} pseudo-element Description ::first-letter 콘텐츠의 첫클자를 선택한다. ::first-line 콘텐츠의 첫줄을 선택한다. 블록 요소에만 적용할 수 있다. ::after 콘텐츠의 뒤에 위치하는 공간을 선택한다. 일반적으로 content 프로퍼티와 함께 사용된다. ::before 콘텐츠의 앞에 위치하는 공간을 선택한다. 일반적으로 content 프로퍼티와 함께 사용된다. ::selection 드래그한 콘첸츠를 선택한다. iOS Safari 등 일부 브라우저에서 동작 않는다. 1234567891011121314151617181920212223242526272829303132&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; /* p 요소 콘텐츠의 첫글자를 선택 */ p::first-letter { font-size: 3em; } /* p 요소 콘텐츠의 첫줄을 선택 */ p::first-line { color: red; } /* h1 요소 콘텐츠의 앞 공간에 content 어트리뷰트 값을 삽입한다 */ h1::before { content: &quot; HTML!!! &quot;; color: blue; } /* h1 요소 콘텐츠의 뒷 공간에 content 어트리뷰트 값을 삽입한다 */ h1::after { content: &quot; CSS3!!!&quot;; color: red; } /* 드래그한 콘텐츠를 선택한다 */ ::selection { color: red; background: yellow; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;This is a heading&lt;/h1&gt; &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit. Explicabo illum sunt distinctio sed, tempore, repellat rerum et ea laborum voluptatum! Quisquam error fugiat debitis maiores officiis, tenetur ullam amet in!&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; result Referencepoiemaweb.com/css3-selector W3C CSS Document CSS selectors","link":"/2021/04/22/css3-day-2/"},{"title":"css3-day-3","text":"2.3 CSS3 UnitsCSS 프로퍼티 값의 단위CSS 프로퍼티에는 키워드, 크기 단위, 색상 표현 단위 등의 특정 단위를 갖는 값을 지정한다. 출처: https://www.w3schools.com/css/css_syntax.asp 1. 키워드각 프로퍼티에 따라 사용할 수 있는 키워드가 존재한다. 예를 들어 display 프로퍼티 값으로 사용할 수 있는 키워드는 block, inline, inline-block, none 이 있다. 제세한 내용은 각각의 프로퍼티를 참조 2. 크기 단위cm, mm, inch 등의 단위도 존재하나 CSS에서 사용하는 대표적인 크기 단위는 px, em, %이다.px은 절대값이고 em, %는 상대값이다.대부분 브라우저의 폰트 사이즈 기본값은 16px, 1em, 100%이다. 프로퍼티 값이 0인 경우, 단위를 생략할 수 있다. 2.1 pxpx은 픽셀(화소) 단위이다. 1px은 화소 1개 크기를 의미한다. 22인치 LCD 모니터의 경우 해상도가 1680 * 1050 인데 이것은 가로에 1680개의 픽셀, 세로에 1050개의 픽셀을 가진다는 의미이다. 200만 화소(픽셀)의 디지털 카메라로 찍은 사진은 1600 * 1200 = 1,920,000으로 통상 200만 화소라 한다. 픽셀은 디바이스 해상도(resolution)에 따라 상대적인 크기를 갖는다. 대부분의 브라우저는 1px을 1/96 인치의 절대단위로 인식한다. px은 요소의 크기나 이미지의 크기 지정에 주로 사용된다. 12345678910111213141516171819&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; body { text-align: center; } div { font-size: 14px; font-weight: bold; padding: 2em; /* 14px * 2 = 28px */ background-color: rgba(255, 0, 0, 0.2); } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;Font size: 14px&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; result 2.2 %%는 백분률 단위의 상대 단위이다. 요소에 지정된 사이즈(상속된 사이즈나 디폴트 사이즈)에 상대적인 사이즈를 설정한다. 1234567891011121314151617181920&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; body { font-size: 14px; text-align: center; } div { font-size: 120%; /* 14px * 1.2 = 16.8px */ font-weight: bold; padding: 2em; /* 16.8px * 2 = 33.6px */ background-color: rgba(255, 0, 0, 0.2); } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;Font size: 14px * 120% → 16.8px&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; result 2.3 emem은 배수 단위로 상대 단위이다. 요소에 지정된 사이즈(상속된 사이즈나 디폴트 사이즈)에 상대적인 사이즈를 설정한다. 예를 들어 1em은 요소에 지정된 사이즈와 같고 2em은 요소에 지정된 사이즈의 2배이다. 폰트 사이즈 설정이나 콘텐츠를 포함하는 컨테이너의 크기 설정에 사용하면 상대적인 설정이 가능하여 편리하다. 1234567891011121314151617181920&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; body { font-size: 14px; text-align: center; } div { font-size: 1.2em; /* 14px * 1.2 = 16.8px */ font-weight: bold; padding: 2em; /* 16.8px * 2 = 33.6px */ background-color: rgba(255, 0, 0, 0.2); } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;Font size: 1.2em → 14px * 1.2 = 16.8px&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; result 중첩된 자식 요소에 em을 지정하면 모든 자식 요소의 사이즈에 영향을 미치기 때문에 주의하여야 한다. 123456789101112131415161718192021222324252627282930&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; body { font-size: 14px; text-align: center; } div { font-size: 1.2em; /* 14px * 1.2 = 16.8px */ font-weight: bold; padding: 2em; } .box1 { background-color: rgba(255, 0, 0, 0.2); } .box2 { background-color: rgba(255, 0, 0, 0.6); } .box3 { background-color: rgba(255, 0, 0, 0.8); } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class='box1'&gt; Font size: 1.2em ⇒ 14px * 1.2 = 16.8px &lt;div class='box2'&gt; Font size: 1.2em ⇒ 16.8px * 1.2 = 20.16px &lt;div class='box3'&gt; Font size: 1.2em ⇒ 20.16px * 1.2 = 24.192px &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; result 2.4 remem의 기준은 상속의 영향으로 바뀔 수 있다. 즉, 상황에 따라 1.2em은 각기 다른 값을 가질 수 있다. rem은 최상위 요소(html)의 사이즈를 기준으로 삼는다. rem의 r 은 root를 의미한다. 12345678910111213141516171819202122232425262728293031&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; html { font-size: 14px; /* font-size 미지정 시에는 16px */ } div { font-size: 1.2rem; /* html font-size: 14px * 1.2 = 16.8px */ font-weight: bold; padding: 2em; text-align: center; } .box1 { background-color: rgba(255, 0, 0, 0.2); } .box2 { background-color: rgba(255, 0, 0, 0.6); } .box3 { background-color: rgba(255, 0, 0, 0.8); } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class='box1'&gt; Font size: 1.2rem ⇒ 14px * 1.2 = 16.8px &lt;div class='box2'&gt; Font size: 1.2rem ⇒ 14px * 1.2 = 16.8px &lt;div class='box3'&gt; Font size: 1.2rem ⇒ 14px * 1.2 = 16.8px &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; result 사용자가 브라우저의 기본 폰트 크기를 변경하더라도 이에 따라 웹사이트의 레이아웃을 적잘히 조정할 수 있다는 장점이 있다. 따라서 폰트 사이즈 뿐만이 아니라 콘텐츠의 크기에 따라 가변적으로 대응하여야 하는 wrapper 요소(container)등에 적합하다. 123.container { width: 70rem; /* 70rem ⇒ 14px * 70 = 980px */} Reset CSS를 사용하여 사전에 html 요소의 font-size 지정이 필요하다. font-size 미지정 시에는 16px가 적용된다. 2.5 Viewport 단위 (vh, vw, vmin, vmax)반응형 웹디자인은 화명의 크기에 동적으로 대응하기 위해 % 당위를 자주 사용한다. 하지만 % 단위는 em과 같이 상속에 의해 부모 요소에 상대적 영향을 받는다. Viewport 단위는 상대적인 단위로 viewport를 기준으로 한 상대적 사이즈를 의미한다. 단위 Description vw viewport 너비의 1/100 vh viewport 높이의 1/100 vmin viewport 너비 또는 높이 중 작은 쪽의 1/100 vmax viewport 너비 또는 높이 중 큰 쪽의 1/100 예를 들어 viewport 너비가 1000px, 높이가 600px인 경우, 1vw: viewport 너비 1000px의 1%인 10px 12345678910111213141516171819202122&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; body { margin: 0px; } .item { width: 50vw; height: 100vh; text-align: center; line-height: 100vh; font-size: 4rem; color: white; } .item1 { background-color: red; } .item2 { background-color: orange; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class='item item1'&gt;item1&lt;/div&gt; &lt;div class='item item2'&gt;item2&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; result 브라우저에 따라 지원이 완전하지 않을 수 있으므로 주의가 필요하다. 3. 색상 표현 단위색상을 지정하기 위해 키워드(red, blue)를 사용할 수 있다. 사용이 간편하다는 장점이 있으나 표현할 수 있는 색상의 수는 제한된다. 색상을 표현할 수 있는 키워드 리스트는 W3C css3-color를 참조 1234567891011121314151617181920212223242526272829303132&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;body&gt; &lt;h2 style=&quot;background-color:red&quot;&gt; Red background-color &lt;/h2&gt; &lt;h2 style=&quot;background-color:green&quot;&gt; Green background-color &lt;/h2&gt; &lt;h2 style=&quot;background-color:blue;color:white&quot;&gt; Blue background-color and white text color &lt;/h2&gt; &lt;h2 style=&quot;background-color:orange&quot;&gt; Orange background-color &lt;/h2&gt; &lt;h2 style=&quot;background-color:yellow&quot;&gt; Yellow background-color &lt;/h2&gt; &lt;h2 style=&quot;background-color:cyan&quot;&gt; Cyan background-color &lt;/h2&gt; &lt;h2 style=&quot;background-color:black;color:white&quot;&gt; Black background-color and white text color &lt;/h2&gt; &lt;/body&gt;&lt;/html&gt; result 더욱 다양한 색상을 표현하기 위해 다음과 같은 색상 표현 당위를 사용할 수 있다. HTML COLOR CODES Referencepoiemaweb.com/css3-units","link":"/2021/04/26/css3-day-3/"},{"title":"css3-day-4","text":"2.4 CSS3 Box Model박스 모델모든 HTML 요소는 Box 형태의 영역을 가지고 있다. Box 형태란 물론 사각형을 의미한다. 브라우저는 박스 모델의 크기(dimension)와 프로퍼티(색, 배경, 모양 등), 위치를 근거로 하여 렌더링을 실행한다. 웹디자인은 콘텐츠를 담을 박스 모델을 정의하고 CSS 프로퍼티를 통해 스타일(배경, 폰트와 텍스트 등)과 위치 및 정령을 지정하는 것이라고 할 수 있다. Box 모델을 구성하는 콘텐트(Content), 패딩(Padding), 테두리(Border), 마진(Margin)에 대한 설명은 아래와 같다. 명칭 설명 Content 요소의 텍스트나 이미지 등의 실제 내용이 위치하는 영역이다. width, height 프로퍼티를 갖는다. Padding 테두리(Border) 안쪽에 위치하는 요소의 내부 여백 영역이다. padding 프로퍼티 값은 패딩 영역의 두께를 의미하며 기본색은 투명(transparent)이다. 요소에 적용된 배경의 컬러, 이미지는 패딩 영역까지 적용된다. Border 테두리 영역으로 border 프로퍼티 값은 테두리의 두께를 의미한다. Margin 테두리(Border) 바깥에 위치하는 요소의 외부의 여백 영역이다. margin 프로퍼티 값은 마진 영역의 두께를 의미한다. 기본적으로 투명(transparent)하며 배경색을 지정할 수 없다. 123456789101112131415161718192021222324&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; div { /* 배경색의 지정: 콘텐츠 영역과 패딩 영역에 적용된다. */ background-color: lightgrey; /* 콘텐츠 영역의 너비 */ width: 300px; /* 패딩 영역의 두께 */ padding: 25px; /* 테두리: 두께 형태 색상 */ border: 25px solid navy; /* 마진 영역의 두께 */ margin: 25px; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h2&gt;Box Model&lt;/h2&gt; &lt;div&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; result 1. width / height 프로퍼티width와 height 프로퍼티는 요소의 너비와 높이를 지정하기 위해 사용된다. 이때 지정되는 요소의 너비와 높이는 콘텐츠 영역을 대상으로 한다. 이는 box-sizing 프로퍼티에 기본값인 context-box가 적용되었기 때문이다. box-sizing 프로퍼티에 border-box를 적용하면 콘텐츠 영역, padding, border가 포함된 영역을 width / height 프로퍼티의 대상으로 지정 할 수 있다. 만일 width와 height로 지정한 콘텐츠 영역보다 실제 콘텐츠가 크면 콘텐츠 영역을 넘치게 된다는 것에 유의하여야 한다. 12345678910111213141516171819&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;style&gt; div { width: 300px; height: 100px; background-color: cornsilk; border: 5px solid navy; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt; Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; result overflow: hidden; 을 지정하면 넘친 콘텐츠를 감출 수 있다. 기본적으로 width와 height 프로퍼티는 콘텐츠 영역을 대상으로 요소의 너비와 높이를 지정하므로 박스 전체 크기는 다음과 같이 계산할 수 있다. 전체 너비width + left padding + right padding + left border + right border + left margin + right margin 전체 높이height + top padding + bottom padding + top border + bottom border + top margin + bottom margin width와 height 프로퍼티의 초기값은 auto로써 이것은 브라우저가 상황에 따라 적당한 width와 height 값을 계산할 것을 의미한다. 예를 들어 block 요소의 경우, width는 부모 요소의 100%, height는 콘텐츠의 높이(+ 약간의 여분)가 지정된다. 1234567891011121314&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;style&gt; div { background-color: beige; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;This is a div&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; result 명시적으로 width와 height를 지정하기 위해서는 px, % 등의 크기 단위를 사용한다. 12345678910111213141516&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;style&gt; div { background-color: beige; height: 100px; width: 50%; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;This is a div&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; result width와 height 프로퍼티를 비롯한 모든 박스모델 관련 프로퍼티(margin, padding, border, box-sizing 등)는 상속되지 않는다. 2. margin / padding 프로퍼티margin / padding 프로퍼티는 content의 4개 방향(top, right, left, bottom)에 대하여 지정이 가능하다. 1234567891011121314151617181920212223&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;style&gt; div { border: 5px solid red; margin-top: 40px; margin-right: 30px; margin-bottom: 20px; margin-left: 10px; padding-top: 10px; padding-right: 20px; padding-bottom: 30px; padding-left: 40px; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.&lt;/div&gt; &lt;/body&gt;&lt;/html&gt; result -top, -right, -bottom, -left 4방향의 프로퍼티를 각각 지정하지 않고 margin, padding 1개의 프로퍼티만으로 4방향의 프로퍼티를 한번에 지정할 수 있다. 4개의 값을 지정할 때 margin: 25px 50px 75px 100px; margin-top: 25px; margin-right: 50px; margin-bottom: 75px; margin-left: 100px; 3개의 값을 지정할 때 margin: 25px 50px 75px; margin-top: 25px; margin-right: 50px; margin-left: 50px; margin-bottom: 75px 2개의 값을 지정할 때 margin: 25px 50px; margin-top: 25px; margin-bottom: 25px; margin-right: 50px; margin-left: 50px; 1개의 값을 지정할 때 margin: 25px; margin-top: 25px; margin-right: 25px; &gt; - margin-bottom: 25px; margin-left: 25px; 12345678910111213141516&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;style&gt; div { border: 5px solid red; margin: 40px 30px 20px 10px; padding: 10px 20px 30px 40px; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.&lt;/div&gt; &lt;/body&gt;&lt;/html&gt; result margin 프로퍼티에 auto 키워드를 설정하면 해당 요소를 브라우저 중앙에 위치 시킬 수 있다. 보다 자세한 중앙 정렬 방법에 대해서는 Horizontal &amp; Vertical Centering을 참조 123456789101112131415&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;style&gt; div { border: 5px solid red; width: 600px; margin: 0 auto; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.&lt;/div&gt; &lt;/body&gt;&lt;/html&gt; result 요소 너비가 브라우저 너비보다 크면 가로 스크롤바가 만들어진다. 이 문제를 해결하기 위해서 max-width 프로퍼티를 사용할 수 있다. 123456789101112131415&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;style&gt; div { border: 5px solid red; max-width: 600px; margin: auto; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.&lt;/div&gt; &lt;/body&gt;&lt;/html&gt; result max-width 프로퍼티를 사용하면 브라우저 너비가 요소의 너비보다 좁아질 때 자동으로 요소의 너비가 줄어든다. max-width 프로퍼티는 요소 너비의 최대값을, min-width 프로퍼티는 요소 너비의 최소값을 지정한다. 예를 들어 max-width: 300px; 의 경우, 브라우저의 너비가 300px보다 작아지면 요소 너비는 브라우저의 너비에 따라서 작아진다. min-width: 300px; 의 경우 브라우저의 너비가 300px보다 작아져도 요소 너비는 지정 너비(300px)을 유지한다. 3. border 프로퍼티3.1 border-styleborder-style 프로퍼티는 테두리 선의 스타일을 지정한다. MDN: border-style 12345678910111213141516171819202122232425262728293031323334353637&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;style&gt; p { background: palegreen; padding: 10px; } p.dotted { border-style: dotted; } p.dashed { border-style: dashed; } p.solid { border-style: solid; } p.double { border-style: double; } p.groove { border-style: groove; } p.ridge { border-style: ridge; } p.inset { border-style: inset; } p.outset { border-style: outset; } p.none { border-style: none; } p.hidden { border-style: hidden; } p.mix { border-style: dotted dashed solid double; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;h2&gt;border-style Property&lt;/h2&gt; &lt;p class=&quot;dotted&quot;&gt;dotted&lt;/p&gt; &lt;p class=&quot;dashed&quot;&gt;dashed&lt;/p&gt; &lt;p class=&quot;solid&quot;&gt;solid&lt;/p&gt; &lt;p class=&quot;double&quot;&gt;double&lt;/p&gt; &lt;p class=&quot;groove&quot;&gt;groove&lt;/p&gt; &lt;p class=&quot;ridge&quot;&gt;ridge&lt;/p&gt; &lt;p class=&quot;inset&quot;&gt;inset&lt;/p&gt; &lt;p class=&quot;outset&quot;&gt;outset&lt;/p&gt; &lt;p class=&quot;none&quot;&gt;none&lt;/p&gt; &lt;p class=&quot;hidden&quot;&gt;hidden&lt;/p&gt; &lt;p class=&quot;mix&quot;&gt;dotted dashed solid double&lt;/p&gt; &lt;/body&gt;&lt;/html&gt; result 프로퍼티 값의 갯수에 따라 4개 방향 (top, right, left, bottom)에 대하여 지정이 가능하다. 123456789101112131415161718192021222324252627282930313233&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; p { background: palegreen; padding: 10px; } p.d1 { /* four sides */ border-style: dashed; } p.d2 { /* horizontal | vertical */ border-style: dotted solid; } p.d3 { /* top | horizontal | bottom */ border-style: hidden double dashed; } p.d4 { /* top | right | bottom | left */ border-style: none solid dotted dashed; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;p class=&quot;d1&quot;&gt;border-style: dashed;&lt;/p&gt; &lt;p class=&quot;d2&quot;&gt;border-style: dotted solid;&lt;/p&gt; &lt;p class=&quot;d3&quot;&gt;border-style: hidden double dashed;&lt;/p&gt; &lt;p class=&quot;d4&quot;&gt;border-style: none solid dotted dashed;&lt;/p&gt; &lt;/body&gt;&lt;/html&gt; result 3.2 border-widthborder-width 프로퍼티는 테두리의 두께를 지정한다. 프로퍼티 값의 갯수에 따라 4개 방향(top, right, left, bottom)에 대하여 지정이 가능하다. border-width 프로퍼티는 border-style과 함께 사용하지 않으면 적용되지 않는다. MDN: border-width 12345678910111213141516171819202122232425262728293031323334353637&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;style&gt; p { background: palegreen; padding: 10px; border-style: solid } p.one { border-width: thin; /* 1px */ } p.two { border-width: medium; /* 3px */ } p.three { border-width: thick; /* 5px */ } p.four { border-width: 15px; } p.five { border-width: 2px 10px 4px 20px; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;h2&gt;border-width Property&lt;/h2&gt; &lt;p&gt;initial: 3px&lt;/p&gt; &lt;p class=&quot;one&quot;&gt;thin: 1px&lt;/p&gt; &lt;p class=&quot;two&quot;&gt;medium: 3px&lt;/p&gt; &lt;p class=&quot;three&quot;&gt;thick: 5px&lt;/p&gt; &lt;p class=&quot;four&quot;&gt;15px&lt;/p&gt; &lt;p class=&quot;five&quot;&gt;2px 10px 4px 20px&lt;/p&gt; &lt;/body&gt;&lt;/html&gt; result 3.3 border-colorborder-color 프로퍼티는 테두리의 색상을 지정한다. 프로퍼티 값의 갯수에 따라 4개 방향(top, right, left, bottom)에 대하여 지정이 가능하다. border-color 프로퍼티는 border-style 과 함께 사용하지 않으면 적용되지 않는다. MDN: border-color 1234567891011121314151617181920212223242526272829&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;style&gt; p { background: palegreen; padding: 10px; border-style: solid; } p.one { border-color: red; } p.two { border-color: green; } p.three { border-color: red green blue yellow; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;h2&gt;border-color Property&lt;/h2&gt; &lt;p class=&quot;one&quot;&gt;border-color: red&lt;/p&gt; &lt;p class=&quot;two&quot;&gt;border-color: green&lt;/p&gt; &lt;p class=&quot;three&quot;&gt;border-color: red green blue yellow&lt;/p&gt; &lt;/body&gt;&lt;/html&gt; result 3.4 border-radiusborder-radius 프로퍼티는 테두리 모서리를 둥글게 표현하도록 지정한다. 프로퍼티 값은 길이를 나타내는 단위(px, em 등)와 %를 사용한다. 각각의 모서리에 border-radius 프로퍼티를 개별적으로 지정할 수도 있고 4개의 모서리를 short-hand로 한번에 지정할 수도 있다. 하나 혹은 2개의 반지름을 설정하여 각각의 모서리 굴곡을 설정할 수 있기 때문에 원 혹은 타원의 모양으로 정의가 가능하다. MDN: border-radius 12345678910111213141516171819202122232425262728293031323334&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;style&gt; div { background: #eaeaed; color: #666; display: inline-block; width: 90px; height: 90px; line-height: 90px; margin: 0 14px; text-align: center; } .border-rounded { /* 4 꼭지점에 대해 Radius 지정 */ border-radius: 5px; } .border-circle { border-radius: 50%; } .border-football { /* top-left &amp; bottom-right | top-right &amp; bottom-left */ border-radius: 15px 75px; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=&quot;border-rounded&quot;&gt;5px&lt;/div&gt; &lt;div class=&quot;border-circle&quot;&gt;50%&lt;/div&gt; &lt;div class=&quot;border-football&quot;&gt;15px 75px&lt;/div&gt; &lt;/body&gt;&lt;/html&gt; result 모든 모서리에 동일한 둥근 모서리 설정 12345678910.border-rounded { border-radius: 20px; /* 위 코드는 아래의 shorthand이다. border-top-left-radius: 20px; border-top-right-radius: 20px; border-bottom-right-radius: 20px; border-bottom-left-radius: 20px; */} 12345678910111213141516171819202122&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; div { background: #eaeaed; color: #666; width: 150px; height: 150px; line-height: 150px; text-align: center; } .border-rounded { /* 모든 모서리를 동일하게 설정 */ border-radius: 20px; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;border-rounded&quot;&gt;border-radius: 20px&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; result 각각의 모서리를 개별적으로 설정 12345678910.border-rounded { border-radius: 10px 40px 40px 10px; /* 위 코드는 아래의 shorthand이다. border-top-left-radius: 10px; border-top-right-radius: 40px; border-bottom-right-radius: 40px; border-bottom-left-radius: 10px; */} 12345678910111213141516171819202122&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; div { background: #eaeaed; color: #666; width: 200px; height: 150px; line-height: 150px; text-align: center; } .border-rounded { /* 각각의 모서리를 개별적으로 설정 */ border-radius: 10px 40px 40px 10px; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;border-rounded&quot;&gt;10px 40px 40px 10px&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; result 두개의 반지름을 지정하여 타원형 둥근 모서리 설정 123.border-rounded { border-top-left-radius: 50px 25px;} 123456789101112131415161718192021&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; div { background: #eaeaed; color: #666; width: 300px; height: 150px; line-height: 150px; text-align: center; } .border-rounded { border-top-left-radius: 50px 25px; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;border-rounded&quot;&gt;border-top-left-radius: 50px 25px&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; result 각각의 모서리에 타원형 둥근 모서리 축약 설정 123.border-rounded { border-radius: 50px 50px 0 0 / 25px 25px 0 0;} 12345678910111213141516171819202122232425262728&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; div { background: #eaeaed; color: #666; width: 450px; height: 150px; padding: 10px; } .border-rounded { border-radius: 10px 20px 30px 40px / 5px 10px 15px 20px; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;border-rounded&quot;&gt; border-radius: 10px 20px 30px 40px / 5px 10px 15px 20px; &lt;ul&gt; &lt;li&gt;border-top-left-radius: 10px 5px;&lt;/li&gt; &lt;li&gt;border-top-right-radius: 20px 10px;&lt;/li&gt; &lt;li&gt;border-bottom-right-radius: 30px 15px;&lt;/li&gt; &lt;li&gt;border-bottom-left-radius: 40px 20px;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; result 3.5 borderborder 프로퍼티는 border-width, border-style, border-color를 한번에 설정하기 위한 shorthand 프로퍼티이다. MDN: Border Shorthand 12/* Syntax */border: border-width border-style border-color; 1234p { /* border-width border-style border-color */ border: 5px solid red;} 4. box-sizing 프로퍼티box-sizing 프로퍼티는 width, height 프로퍼티의 대상 영역을 변경할 수 있다. box-sizing 프로퍼티의 기본값은 content-box이다. 이는 width, height 프로퍼티의 대상 영역이 content 영역을 의미한다. box-sizing 프로퍼티의 값을 border-box로 지정하면 마진을 제외한 박스 모델 전체를 width, height 프로퍼티의 대상 영역으로 지정할 수 있어서 CSS Layout을 직관적으로 사용할 수 있게 한다. 키워드 설명 content-box width, height 프로퍼티 값은 content 영역을 의미한다. (기본값) border-box width, height 프로퍼티 값은 content 영역, padding, border가 포함된 값을 의미한다. 1234567891011121314151617181920212223242526&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;style&gt; .content-box { width: 600px; border: 10px solid; padding: 50px; margin: 50px; background-color: red; } .border-box { box-sizing: border-box; width: 600px; border: 10px solid; padding: 50px; margin: 50px; background-color: red; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=&quot;content-box&quot;&gt;content-box&lt;/div&gt; &lt;div class=&quot;border-box&quot;&gt;border-box&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; result box-sizing 프로퍼티는 상속되지 않는다. 따라서 box-sizing 프로퍼티를 사용하도록 초기화하려면 아래와 같이 정의한다. 123456html { box-sizing: border-box;}*, *:before, *:after { box-sizing: inherit;} Referencepoiemaweb.com/css3-box-model www.w3schools.com/css/css_boxmodel.asp wikipedia.org","link":"/2021/04/27/css3-day-4/"},{"title":"css3-day-5","text":"2.5 CSS3 Displaydisplay, visibility, opacity 프로퍼티1.display 프로퍼티display 프로퍼티는 layout 정의에 자주 사용되는 중요한 프로퍼티이다. 프로퍼티값 키워드 설명 block block 특성을 가지는 요소(block 레벨 요소)로 지정 inline inline 특성을 가지는 요소(inline 레벨 요소)로 지정 inline-block inline-block 특성을 가지는 요소(inline-block 레벨 요소)로 지정 none 해당 요소를 화면에 표시하지 않는다(공간조차 사라진다.) 모든 HTML 요소는 아무런 CSS를 적용하지 않아도 기본적으로 브라우저에 표현되는 디폴트 표시값을 가진다. HTML 요소는 block 또는 inline 튿성을 갖는다. 아래는 p 요소에 대한 크롬 브라우저의 디폴트 css이다. 1234567p { display: block; -webkit-margin-before: 1em; -webkit-margin-after: 1em; -webkit-margin-start: 0px; -webkit-margin-end: 0px;} display 프로퍼티는 상속되지 않는다. 1.1 block 레벨 요소block 특성을 가지는 요소(block 레벨 요소 또는 block 요소)는 아래와 같은 특징을 갖는다. 항상 새로운 라인에서 시작한다. 화면 크기 전체의 가로폭을 차지한다.(width: 100%) width, height, margin, padding 프로퍼티 지정이 가능하다. block 레벨 요소 예 divh1~h6polullihrtableform 1234567891011121314151617181920212223242526&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; div:nth-of-type(1) { background-color: #FFA07A; padding: 20px; } div:nth-of-type(2) { background-color: #FF7F50; padding: 20px; width: 300px; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt; &lt;h2&gt;블록 레벨 요소&lt;/h2&gt; &lt;p&gt;width, height 미지정 → width: 100%; height: auto;&lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h2&gt;블록 레벨 요소&lt;/h2&gt; &lt;p&gt;width: 300px → width: 300px; height: auto;&lt;/p&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; result 1.2 inline 레벨 요소inline 특성을 가지는 요소(inline 레벨 요소 또는 inline 요소)는 아래와 같은 특징을 갖는다. 새로운 라인에서 시작하지 않으며 문장의 중간에 들어갈 수 있다. 즉, 줄을 바꾸지 않고 다른 요소와 함께 한 행에 위치한다. content의 너비만큼 가로폭을 차지한다. width, height, margin-top, margin-bottom 프로퍼티를 지정할 수 없다. 상, 하 여백은 line-height로 지정한다. inline 레벨 요소 뒤에 공백(엔터, 스페이스 등)이 있는 경우, 정의하지 않은 space(4px)가 자동 지정된다. inline 레벨 요소 내에 block 레벨 요소를 포함할 수 없다. inline 레벨 요소는 일반적으로 block 레벨 요소에 포함되어 사용된다. span a strong img input select textarea button 12345678910111213141516171819202122&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; span { background-color: red; color: white; padding: 10px; /* width, height, margin-top, margin-bottom 프로퍼티를 지정할 수 없다. */ /* width: 200px; */ /* margin: 10px; */ /* 상, 하 여백은 line-height로 지정한다. */ /* line-height: 50px; */ } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;My &lt;span&gt;Important&lt;/span&gt; Heading&lt;/h1&gt; &lt;span&gt;Inline&lt;/span&gt; &lt;span&gt;Inline&lt;/span&gt;&lt;span&gt;Inline&lt;/span&gt;&lt;/body&gt;&lt;/html&gt; result 1.3 inline-block 레벨 요소block 과 inline 레벨 요소의 특징을 모두 갖는다. inline 레벨 요소와 같이 한 줄에 표현되면서 width, height, margin 프로퍼티를 모두 지정할 수 있다. 기본적으로 inline 레벨요소와 흡사하게 줄을 바꾸지 않고 다른 요소와 함께 한 행에 위치시킬 수 있다. block 레벨 요소처럼 width, height, margin, padding 프로퍼티를 모두 정의할 수 있다. 상,하 여백을 margin과 line-height 두가지 프로퍼티 모두를 통해 제어할 수 있다. content의 너비만큼 가로폭을 차지한다. inline-block 레벨 요소 뒤에 공백(엔터, 스페이스 등)이 있는 경우, 정의하지 않은 space(4px)가 자동 지정된다. 123456789101112131415161718192021222324252627282930313233&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; .wrapper { font-size: 0; /*요소간 간격을 제거*/ } .inline-block { display: inline-block; vertical-align: middle; /* inline-block 요소 수직 정렬 */ border: 3px solid #73AD21; font-size: 16px; } .box1 { width: 300px; height: 70px; } .box2 { width: 300px; height: 150px; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;inline-block box1&quot;&gt;inline-block height 70px&lt;/div&gt; &lt;div class=&quot;inline-block box2&quot;&gt;inline-block height 150px&lt;/div&gt; &lt;div class=&quot;wrapper&quot;&gt; &lt;div class=&quot;inline-block box1&quot;&gt;inline-block height 70px&lt;/div&gt; &lt;div class=&quot;inline-block box2&quot;&gt;inline-block height 150px&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; result 2. visibility 프로퍼티visibility 프로퍼티는 요소를 보이게 할 것인지 보이지 않게 할 것인지를 정의한다. 즉, 요소의 렌더링 여부를 결정한다. 프러퍼티값 키워드 설명 visible 해당 요소를 보이게 한다(기본값) hidden 해당 요소를 보이지 않게 한다. display: none; 은 해당 요소의 공간까지 사라지게 하지만 visibility:hidden;은 해당 요소의 공간은 사라지지 않고 남아있게 된다. collapse table 요소에 사용하며 행이나 열을 보이지 않게 한다. none table 요소의 row나 column을 보이지 않게 한다. 1234567891011121314151617181920212223242526272829&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; .visible { visibility: visible; } .hidden { visibility: hidden; } table, td { border: 1px solid black; } .collapse { visibility: collapse; } /* .collapse { visibility: hidden; } */ &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h1 class=&quot;visible&quot;&gt;visibility: visible&lt;/h1&gt; &lt;h1 class=&quot;hidden&quot;&gt;visibility: hidden&lt;/h1&gt; &lt;h1 style=&quot;display:none&quot;&gt;display:none&lt;/h1&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt;A&lt;/td&gt; &lt;td&gt;B&lt;/td&gt; &lt;/tr&gt; &lt;tr class=&quot;collapse&quot;&gt; &lt;td&gt;C&lt;/td&gt; &lt;td&gt;D&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;&lt;/body&gt;&lt;/html&gt; result 3. opacity 프로퍼티opacity 프로퍼티는 요소의 투명도를 정의한다. 0.0 ~ 1.0의 값을 입력하며 0.0은 투명, 1.0은 불투명을 의미한다. 123456789101112131415161718192021222324&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; div, img { float: left; width: 150px; height: 150px; margin: 30px; background-color: blue; color: white; opacity: 0.5; transition: opacity 1s; } div:hover, img:hover { opacity: 1.0; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;opacity: 0.5&lt;/div&gt; &lt;img src=&quot;../img/cat.png&quot; alt=&quot;cat&quot;&gt;&lt;/body&gt;&lt;/html&gt; result Referencepoiemaweb.com/css3-display W3C CSS Document","link":"/2021/04/29/css3-day-5/"},{"title":"css3-day-6","text":"css3 BackgroundBackground 관련 프로퍼티는 해당 요소의 배경으로 이미지 또는 색상을 정의한다. 자세한 내용은 CSS Background and Borders를 참조한다. 1. background-image 프로퍼티요소에 배경 이미지를 지정한다. MDN:background-image 12345678910111213&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; body { background-image: url('../img/cat.png'); } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h3&gt;Background Image&lt;/h3&gt;&lt;/body&gt;&lt;/html&gt; result 2.background-repeat 프로퍼티배경 이미지의 반복을 지정한다. 수직, 수평 또는 수직과 수평 모두의 반복을 지정할 수 있다. 설정된 이미지의 크기가 화면보다 작으면 자동으로 이미지가 반복 출력되어 화면을 채우게 된다. 이것을 background-repeat 프로퍼티의 기본값이 repeat 이기 때문이다. x축으로만 배경 이미지를 반복할 경우, background-repeat 프로퍼티값에 repeat-x, y축으로만 배경 이미지를 반복할 경우, repeat-y 를 설정한다. MDN:background-repeat 1234567891011121314&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; body { background-image: url('../img/cat.png'); background-repeat: repeat-x; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h3&gt;background-repeat: repeat-x;&lt;/h3&gt;&lt;/body&gt;&lt;/html&gt; result 반복 출력을 멈추고 싶은 경우, background-repeat 프로퍼티값에 no-repeat를 설정한다. 1234567891011121314&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; body { background-image: url('../img/cat.png'); background-repeat: no-repeat; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h3&gt;background-repeat: no-repeat;&lt;/h3&gt;&lt;/body&gt;&lt;/html&gt; result background-image에 복수개의 이미지를 설정할 경우, 먼저 설정된 이미지가 전면에 출력된다. 1234567891011121314&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; body { background-image: url('../img/cat.png'), url('../img/og_image.png'); background-repeat: no-repeat, repeat; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h3&gt;background-repeat: no-repeat, repeat;&lt;/h3&gt;&lt;/body&gt;&lt;/html&gt; result 3. background-size 프로퍼티배경 이미지의 사이즈를 지정한다. 배경 이미지의 고유 비율을 유지하기 때문에 설정에 따라 이미지의 일부가 보이지 않을 수 있다. 프로퍼티값은 px, %, cover, contain 등을 사용한다. 배경이미지의 width, height를 모두 설정할 수 있다. 이때 첫번째 값은 width, 두번째 값은 height를 의미한다. 하나의 값만을 지정한 경우, 지정한 값은 width를 의미하게 되며 height는 auto로 지정된다. MDN: background-size px값 지정 배경이미지 크기가 지정된 px값 그대로 설정된다. 첫번째 값은 width, 두번째 값은 height를 의미한다. 123.bg { background-size: 700px 500px;} %값 지정 배경이미지 크기가 지정된 %값에 비례하여 설정된다. 첫번째 값은 width, 두번째 값은 height를 의미한다. 화면을 줄이거나 늘리면 배경이미지의 크기가 따라서 변경되어 찌그러지는 현상이 나타난다. 123.bg { background-size: 100% 100%;} cover 지정 배경이미지의 크기 비율을 유지한 상태에서 부모 요소의 width, height 중 큰값에 배경이미지를 맞춘다. 따라서 이미지의 일부가 보이지 않을 수 있다. 123.bg { background-size: cover;} contain 지정 배경이미지의 크기 비율을 유지한 상태에서 부모 요소의 영역에 배경이미지가 보이지 않는 부분없이 전체가 들어갈 수 있도록 이미지 스케일을 조정한다. 123.bg { background-size: contain;} width, height의 프로퍼티값은 공백으로 구분하여야 한다. 프로퍼티값을 쉼표로 구분하면 다른 배경이미지의 너비를 지정하는 것으로 인식되기 때문에 주의가 필요하다. 12345body { background-image: url(&quot;front.png&quot;), url(&quot;back.png&quot;); background-repeat: no-repeat, no-repeat; background-size: 100%, 500px;} 4. background-attachment 프로퍼티일반적으로 화면을 스크롤하면 배경 이미지도 함께 스크롤 된다. 화면이 스크롤 되더라도 배경이미지는 스크롤되지 않고 고정되어 있게 하려면 background-attachment 프로퍼티에 fixed 키워드를 지정한다. 1background-attachment: fixed; 5. background-position 프로퍼티일반적으로 background-image는 좌상단부터 이미지를 출력한다. 이때 background-position 프로퍼티를 사용하면 이미지의 좌표(xpos,ypos)를 지정할 수 있다. 기본값은 background-position: 0% 0%; 로 배경이미지는 우측 상단에 위치하게 된다. MDN: background-position 1234567891011121314151617181920212223242526272829.example1 { background-position: top;}.example2 { background-position: bottom;}.example3 { background-position: center;}.example4 { background-position: left;}.example5 { background-position: right;}.example6 { /* &lt;percentage&gt; values */ background-position: 25% 75%;}.example7 { /* &lt;length&gt; values xpos ypos */ background-position: 10px 20px;}.example8 { background-position: 0px 0px, center;} 6. background-color 프로퍼티background-color 프로퍼티는 요소의 배경 색상을 지정한다. 색상값 또는 transparent 키워드를 지정할 수 있다. MDN: background-color 1234567.bg-col-white { background-color: rgb(255, 255, 255);}.bg-col-red { background-color: red;} 7. background Shorthandbackground-color, background-image, background-repeat, background-position를 한번에 정의하기 위한 Shorthand Syntax이다. 12// orderbackground: color || image || repeat || attachment || position MDN: background 1background: #FFEE99 url(&quot;URL&quot;) no-repeat center; Referencepoiemaweb.com/css3-background W3C CSS Document","link":"/2021/05/03/css3-day-6/"},{"title":"css3-day-8","text":"2.8 CSS3 Position요소의 위치 정의 1. postion 프로퍼티position 프로퍼티는 요소의 위치를 정의한다. top, bottom, left, right 프로퍼티와 함께 사용하여 위치를 지정한다. 1.1 static (기본 위치)static은 position 프로퍼티의 기본값으로 position 프로퍼티를 지정하지 않았을 때와 같다. 기본적인 요소의 배치 순서에 따라 위에서 아래로, 왼쪽ㅇ에서 오른족으로 순서에 따라 배치되며 부요 요소 내에 자식 요소로서 존재할 때는 부모 요소의 위치를 기준으로 배치된다. 기본적으로 이 값을 지정할 일은 없지만 이미 설정된 position을 무력화하기 위해 사용될 수 있다. 좌표 프로퍼티(top, bottom, left, right)를 같이 사용할 수 없으며 사용할 경우에는 무시 된다. 123456789101112131415161718192021222324252627&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; body { margin: 0; } .parent { width: 150px; height: 150px; background: #bcbcbc; border: 1px solid #bcbcbc; } .static-box { position: static; background: #2E303D; color: #e55c3c; font-weight: bold; text-align: center; line-height: 150px; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;parent&quot;&gt; &lt;div class=&quot;static-box&quot;&gt;static box&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; result 1.2 relative(상대위치)기본 위치(static으로 지정되었을 때의 위치)를 기준으로 좌표 프로퍼티(top, bottom, left, right)를 사용하여 위치를 이동시킨다. static을 선언한 요소와 relative를 선언한 요소의 차이점은 좌표 프로퍼티의 동작 여부뿐이며 그외는 동일하게 동작한다. 1234567891011121314151617181920212223242526272829&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; body { margin: 0; } .parent { width: 150px; height: 150px; background: #bcbcbc; border: 1px solid #bcbcbc; margin: 50px; } .relative-box { position: relative; top: 50px; left: 50px; background: #2E303D; color: #e55c3c; font-weight: bold; text-align: center; line-height: 150px; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;parent&quot;&gt; &lt;div class=&quot;relative-box&quot;&gt;relative box&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; result 위 예제를 보면 parent 클래스의 자식인 relative-box 클래스 요소의 width, height가 부모 요소와 동일하다. 이는 상속에 의한 것이 아니라(width, height는 상속되지 않는다.) relative를 적용한 요소는 좌표 프로퍼티가 적용되는 것만 다를 뿐 그 이외는 static을 지정했을 때와 동일하게 동작하기 때문이다. 즉, width는 100%가 적용되어 부모 요소의 width와 동일한 값을 갖게 된 것이고, height는 auto가 적용되지만 line-height: 150px이 적용되어 부모 요소와 hight가 동일하게 된 것이다. 1.3 absolute (절대위치)부모 요소 또는 가장 가까이 있는 조상 요소(static 제외)를 기준으로 좌표 프로퍼티(top, bottom, left, right)만큼 이동한다. 즉, relative, absolute, fixed 프로퍼티가 선언되어 있는 부모 또는 조상 요소를 기준으로 위치가 결정된다. 만일 부모 또는 조상 요소가 static인 경우, dovument body를 기준으로 하여 좌표 프로퍼티대로 위치하게 된다. 따라서 부모 요소를 배치의 기준으로 삼기 위해서는 부모 요소에 relative를 정의하여야 한다. 이때 다른 요소가 먼저 위치를 점유하고 있어도 뒤로 밀리지 않고 덮어쓰게 된다. (이런 특성을 부유 또는 부유 객체라 한다.) absolute 선언 시, block 레벨 요소의 width는 inline 요소와 같이 content에 맞게 변화되므로 적절한 width를 지정하여야 한다. 12345678910111213141516171819202122232425262728293031&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; body { margin: 0; } .parent { width: 200px; height: 200px; background: #bcbcbc; border: 1px solid #bcbcbc; margin: 50px 0 0 300px; position: relative; } .absolute-box { position: absolute; height: 200px; width: 200px; top: 50px; left: 50px; color: #e55c3c; font-weight: bold; text-align: center; background: #2E303D; line-height: 200px; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;parent&quot;&gt; &lt;div class=&quot;absolute-box&quot;&gt;absolute box (in parent)&lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;absolute-box&quot;&gt;absolute box (no parent)&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; result relative 프로퍼티와 absolute 프로퍼티의 차이점은 아래와 같다. relative 프로퍼티는 기본 위치(static으로 지정되었을 때의 위치)를 기준으로 좌표 프로퍼티(top, bottom, left, right)을 사용하여 위치를 이동시킨다. 따라서 무조건 부모를 기준으로 위치하게 된다. absolute 프로퍼티는 부모에 static 이외의 position 프로퍼티가 지정되어 있을 경우에만 부모를 기준으로 위치하게 된다. 만일 부모, 조상이 모두 static 프로퍼티인 경우, document body를 기준으로 위치하게 된다. 따라서 absolute 프로퍼티 요소는 부모 요소의 영역을 벗어나 자유롭게 어디든지 위치할 수 있다. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; body { margin: 0;} .parent { width: 150px; height: 150px; background: #bcbcbc; border: 1px solid #bcbcbc; margin: 50px; float: left; /*position: relative;*/ } .relative-box { position: relative; top: 10px; left: 10px; width: 150px; height: 150px; background: #2E303D; color: #e55c3c; font-weight: bold; text-align: center; line-height: 150px; } .absolute-box { position: absolute; top: 10px; left: 10px; width: 150px; height: 150px; background: #2E303D; color: #e55c3c; font-weight: bold; text-align: center; line-height: 150px; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;parent&quot;&gt; &lt;div class=&quot;absolute-box&quot;&gt;absolute box&lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;parent&quot;&gt; &lt;div class=&quot;relative-box&quot;&gt;relative box&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; result 1.4 fixed (고정위치)부모 요소와 관계없이 브라우저의 viewport를 기준으로 좌표프로퍼티(top, bottom, left, right)을 사용하여 위치를 이동시킨다. 스크롤이 되더라도 화면에서 사라지지 않고 항상 같은곳에 위치한다. fixd 프로퍼티 선언 시, block 요소의 width는 inline 요소와 같이 content에 맞게 변화되므로 적절한 width를 지정하여야 한다. 12345678910111213141516171819202122232425262728293031323334&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; body { margin: 0; } .fixed-box { position: fixed; color: #e55c3c; font-weight: bold; text-align: center; background: #2E303D; } .sidebar { width: 50px; height: 100%; top: 0; right: 0; padding-top: 100px; } .footer { width: 200px; width: 100%; height: 50px; bottom: 0; left: 0; line-height: 50px; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;fixed-box sidebar&quot;&gt;fixed box (side-bar)&lt;/div&gt; &lt;div class=&quot;fixed-box footer&quot;&gt;fixed box (footer)&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; result 2. z-index 프로퍼티z-index 프로퍼티에 큰 숫자값을 지정할수록 화면 전면에 출력된다. position 프로퍼티가 static 이외인 요소에만 적용된다. 12345678910111213141516171819202122232425262728293031323334353637383940&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; .normal-box { width: 100px; height: 100px; } .absolute-box { width: 100px; height: 100px; position: absolute; } /* z-index는 positon 프로퍼티가 static 이외인 요소에만 적용된다. */ .orange { background-color: orange; z-index: 1000; } .red { background-color: red; left: 50px; top: 50px; z-index: 100; } .green { background-color: green; left: 100px; top: 100px; z-index: 10; } .blue { background-color: blue; left: 150px; top: 150px; z-index: 1; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;normal-box orange&quot;&gt;&lt;/div&gt; &lt;div class=&quot;absolute-box red&quot;&gt;&lt;/div&gt; &lt;div class=&quot;absolute-box green&quot;&gt;&lt;/div&gt; &lt;div class=&quot;absolute-box blue&quot;&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; result 3. overflow 프로퍼티overflow 프로퍼티는 자식 요소가 부모 요소의 영역을 벗어났을 때 처리 방법을 정의한다. 프로퍼티값 Description visible 영역을 벗어난 부분을 표시한다.(기본값) hidden 영역을 벗어난 부분을 잘라내어 보이지 않게 한다. scroll 영역을 벗어난 부분이 없어도 스크롤 표시한다.(현재 대부분 브라우저는 auto과 동일하게 작동한다.) auto 영역을 벗어난 부분이 있을때만 스크롤 표시한다. 1234567891011121314151617181920212223242526272829&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; div { width: 150px; height: 150px; padding: 10px; margin: 30px; font-size: 1.2em; border-radius: 6px; border-color: gray; border-style: dotted; float: left; } .visible { overflow: visible; } .hidden { overflow: hidden; } .scroll { overflow: scroll; } .auto { overflow: auto; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;overflow&lt;/h1&gt; &lt;div class=&quot;visible&quot;&gt;&lt;h3&gt;visible&lt;/h3&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.&lt;/div&gt; &lt;div class=&quot;hidden&quot;&gt;&lt;h3&gt;hidden&lt;/h3&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.&lt;/div&gt; &lt;div class=&quot;scroll&quot;&gt;&lt;h3&gt;scroll&lt;/h3&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.&lt;/div&gt; &lt;div class=&quot;auto&quot;&gt;&lt;h3&gt;auto&lt;/h3&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; result 특정방향으로만 스크롤을 표시하고자 할 때는 overflow-x 또는 overflow-y 프로퍼티를 사용한다. 1div {overflow-y: auto;} Referencepoiemaweb.com/css3-position W3C CSS Document","link":"/2021/05/06/css3-day-8/"},{"title":"css3-day-7","text":"2.7 CSS3 Font &amp; Text폰트와 텍스트폰트 및 텍스트 관련 프로퍼티는 폰트의 크기, 폰트의 지정, 폰트의 스타일, 텍스트 정렬 등을 정의한다. 1. font-size 프로퍼티텍스트의 크기를 정의한다. font-size 123456789101112131415161718&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; .font-size-40 { font-size: 40px; } .font-size-2x { font-size: 2.0em; } .font-size-150ps { font-size: 150%; } .font-size-large { font-size: large; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;p&gt;default font size: 16px&lt;/p&gt; &lt;p class='font-size-40'&gt;font-size: 40px&lt;/p&gt; &lt;p class='font-size-2x'&gt;font-size: 2.0em&lt;/p&gt; &lt;p class='font-size-150ps'&gt;font-size: 150%&lt;/p&gt; &lt;p class='font-size-large'&gt;font-size: large&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; result 2. font-family 프로퍼티폰트를 지정한다. 컴퓨터에 해당 폰트가 설치되어 있지 않으면 적용되지 않는다. font-family 폰트는 여러 개를 동시에 지정이 가능하다. 첫번째 지정한 폰트가 클라이언트 컴퓨터에 설치되어 있지 않은 경우, 다음에 지정된 폰트를 적용한다. 따라서 마지막에 지정하는 폰트는 대부분의 OS에 기본적으로 설치되어 있는 generic-family 폰트(Serif, Sans-serif, Mono spase)를 지정하는 것이 일반적이다. 123456789101112131415161718192021222324&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; .serif { font-family: &quot;Times New Roman&quot;, Times, serif; } .sans-serif { font-family: Arial, Helvetica, sans-serif; } .monospace { font-family: &quot;Courier New&quot;, Courier, monospace; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;font-family&lt;/h1&gt; &lt;p class=&quot;serif&quot;&gt;Times New Roman font.&lt;/p&gt; &lt;p class=&quot;sans-serif&quot;&gt;Arial font.&lt;/p&gt; &lt;p class=&quot;monospace&quot;&gt;Courier New font.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; result 3. font-style / font-weight 프로퍼티font-style 프로퍼티는 이탤릭체의 지정, font-weight 프로퍼티는 폰트 굵기 지정에 사용된다. font-style font-weight 1234567891011121314151617181920212223242526272829303132333435363738&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; p { font-size: 2.0em; } /* font-style normal / italic / oblique */ .italic { font-style: italic; } /* font-weight 100 ~ 900 or normal / bold / lighter / bolder */ .light { font-weight: lighter; } .thick { font-weight: bold; } .thicker { font-weight: 900; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;p&gt;normal style.&lt;/p&gt; &lt;p class=&quot;italic&quot;&gt;font-style: italic&lt;/p&gt; &lt;p class=&quot;light&quot;&gt;font-weight: lighter&lt;/p&gt; &lt;p class=&quot;thick&quot;&gt;font-weight: bold&lt;/p&gt; &lt;p class=&quot;thicker&quot;&gt;font-weight: 900&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; result 4. font ShorthandShorthand Syntax 1font : font-style(optional) font-variant(optional) font-weight(optional) font-size(mandatory) line-height(optional) font-family(mandatory) 123456789101112/* size | family */font: 2em &quot;Open Sans&quot;, serif;/* style | size | family */font: italic 2em &quot;Open Sans&quot;, sans-serif;/* style | variant | weight | size/line-height | family */font: italic small-caps bolder 16px/1.2 monospace;/* style | variant | weight | size/line-height | family *//* font-variant: small-caps; 소문자를 대문자로 만든다. 단 크기는 일반 대문자에 비해 더 작다.*/font: italic small-caps bolder 16px/3 cursive; 5. line-height 프로퍼티텍스트의 높이를 지정한다. 텍스트 수직 정렬에도 응용되어 사용된다. line-height 123456789101112131415161718192021222324252627282930313233343536373839&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; .small { line-height: 70%; /* 16px * 70% */ } .big { line-height: 1.2; /* 16px * 1.2 */ } .lh-3x { line-height: 3.0; /* 16px * 3 */ } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;p&gt; default line-height.&lt;br&gt; default line-height.&lt;br&gt; 대부분 브라우저의 default line height는 약 110% ~ 120%.&lt;br&gt; &lt;/p&gt; &lt;p class=&quot;small&quot;&gt; line-height: 70%&lt;br&gt; line-height: 70%&lt;br&gt; &lt;/p&gt; &lt;p class=&quot;big&quot;&gt; line-height: 1.2&lt;br&gt; line-height: 1.2&lt;br&gt; &lt;/p&gt; &lt;p class=&quot;lh-3x&quot;&gt; line-height: 3.0&lt;br&gt; line-height: 3.0&lt;br&gt; &lt;/p&gt;&lt;/body&gt;&lt;/html&gt; result 다음은 수직 중앙 정렬 예제이다. a 요소의 line-height 값과 a 요소를 감싸는 div 요소의 height 값을 일치시킨다. 12345678910111213141516171819202122232425&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; .button { width: 150px; height: 70px; background-color: #FF6A00; border-radius: 30px; box-shadow: 5px 5px 5px #A9A9A9; } .button &gt; a { display: block; font: italic bold 2em/70px Arial, Helvetica, sans-serif; text-decoration: none; text-align: center; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;button&quot;&gt; &lt;a href=&quot;#&quot;&gt;Click&lt;/a&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; result 6. letter-spacing 프로퍼티글자 사이의 간격을 지정한다. 1234567891011121314151617181920&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; .loose { letter-spacing: 2px; } .tight { letter-spacing: -1px; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit&lt;/p&gt; &lt;p class=&quot;loose&quot;&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit&lt;/p&gt; &lt;p class=&quot;tight&quot;&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; result 7. text-align 프로퍼티텍스트의 수평 정렬을 정의한다. 12345h1 { text-align: center; }h3 { text-align: right; }p.left { text-align: left; }p.justify { text-align: justify; }a { text-align: center; } 8. text-decoration 프로퍼티text-decoration 프로퍼티를 사용하여 링크 underline 을 제거할 수 있다. 또는 텍스트에 underline, overline, line-through를 추가할 수 있다. 12345678910111213141516171819&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; a { text-decoration: none; } p:nth-of-type(1) { text-decoration: overline; } p:nth-of-type(2) { text-decoration: line-through; } p:nth-of-type(3) { text-decoration: underline; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;a href='#'&gt;text-decoration: none&lt;/a&gt; &lt;p&gt;text-decoration: overline&lt;/p&gt; &lt;p&gt;text-decoration: line-through&lt;/p&gt; &lt;p&gt;text-decoration: underline&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; result 9. white-space 프로퍼티white space는 공백(space), 들여쓰기(tab), 줄바꿈(line break)을 의미한다. html은 기본적으로 연속된 공백(space), 들여쓰기(tab)는 1번만 실행되며 줄바꿈(line break)은 무시된다. 또한 텍스트는 부모의 가로 영역을 벗어나지 않고 자동 줄바꿈(wrap)된다. white-space 프로퍼티는 이러한 기본 동작을 제어하기 위한 프로퍼티이다. 프로퍼티값 line break space/tab wrapping(자동줄바꿈) normal 무시 1번만 반영 O nowrap 무시 1번만 반영 X pre 반영 그래도 반영 X pre-wrap 반영 그래로 반영 O pre-line 반영 1번만 반영 O 12345.normal { white-space: normal; }.nowrap { white-space: nowrap; }.pre { white-space: pre; }.pre-wrap { white-space: pre-wrap; }.pre-line { white-space: pre-line; } 10. text-overflow 프로퍼티부모 영역을 벗어난 wrapping(자동줄바꿈)이 되지 않은 텍스트의 처리 방법을 정의한다. 이 프로퍼티를 사용하기 위해서는 아래의 조건이 필요하다. width 프로퍼티가 지정되어 있어야 한다. 이를 위해 필요할 경우 block 레벨 요소로 변경하여야 한다. 자동 줄바꿈을 방지하려면 white-space 프로퍼티를 nowrap으로 설정한다. overflow 프로퍼티에 반드시 “visible”이외의 값이 지정되어 이어야 한다. 1234567/* 부모 영역을 벗어난 텍스트를 잘라내어 보이지 않게 하고 말줄임표(...)를 표시한다. */.truncate { width: 150px; /* width가 지정되어 있어야 한다. */ white-space: nowrap; /* 자동 줄바꿈을 방지 */ overflow: hidden; /* 반드시 &quot;visible&quot; 이외의 값이 지정되어 있어야 한다. */ text-overflow: ellipsis; /* ellipsis or clip */} text-overflow 프로퍼티에 설정할 수 있는 프로퍼티 값은 아래와 같다. 프로퍼티값 Description clip 영역을 벗어난 텍스트를 표시하지 않는다. (default) ellipsis 영역을 벗어난 텍스트를 잘라내어 보이지 않게 하고 말줄임표(…)를 표시한다. &lt;!- &lt; string &gt; 프로퍼티값으로 지정한 임의의 문자열을 출력한다. 1234567891011121314151617181920212223242526272829303132&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;style&gt; div { width: 150px; /* width가 지정되어 있어야 한다. */ height: 150px; padding: 10px; margin: 40px; border-radius: 6px; border-color: gray; border-style: dotted; white-space: nowrap; /* 자동 줄바꿈을 방지 */ overflow: hidden; /* 반드시 &quot;visible&quot; 이외의 값이 지정되어 있어야 한다. */ } .clip { text-overflow: clip; } .ellipsis { text-overflow: ellipsis; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;text-overflow&lt;/h1&gt; &lt;div class=&quot;clip&quot;&gt; &lt;h3&gt;clip&lt;/h3&gt; Lorem ipsum dolor sit amet, consectetur adipisicing elit &lt;/div&gt; &lt;div class=&quot;ellipsis&quot;&gt; &lt;h3&gt;ellipsis&lt;/h3&gt; Lorem ipsum dolor sit amet, consectetur adipisicing elit &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; result 11. word-wrap 프로퍼티한 단어의 길이가 길어서 부모 영역을 벗어난 텍스트의 처리 방법을 정의한다. link 등을 표기할 때 그 길이가 매우 길어지는데 이 프로퍼티를 사용하지 않으면 부모 영역을 넘어가게 된다. 1.word-wrap { word-wrap: break-word; } 12. word-break 프로퍼티한 단어의 길이가 길어서 부모 영역을 벗어난 텍스트의 처리 방법을 정의한다. word-wrap 프로퍼티는 단어를 어느 정도는 고려한다. word-break: break-all; 는 단어를 고려하지 않고 부모 영역에 맞추어 강제 개행한다. Referencepoiemaweb.com/css3-font-text W3C CSS Document","link":"/2021/05/06/css3-day-7/"},{"title":"css3-day-9","text":"CSS3 Float요소 정렬float 프로퍼티는 주로 레이아웃을 구성할 때 블록 레벨 요소를 가로 정렬하기 위해 사용되는 중요한 기법이다. flexbox 레이아웃를 사용한다면 더욱 간단하게 정렬을 구현할 수도 있지만 flexbox 레이아웃을 지원하지 않는 IE를 고려해야 한다면 float 프로퍼티를 사용해야 한다. float 프로퍼티는 본래 아래 예제와 같이 이미지와 텍스트가 있을 때, 이미지 주위를 텍스트로 감싸기 위해 만들어진 것이다. 123456789101112131415&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; img { float: left; margin-right: 10px; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;img src=&quot;img/cat.png&quot;&gt; &lt;div&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; result float 프로퍼티는 해당 요소를 다음 요소 위에 떠 있게(부유하게)한다. 여기서 떠 있다(float)는 의미는 요소가 기본 레이아웃 흐름에서 벗어나 요소의 모서리가 페이지의 왼쪽이나 오른쪽에 이동하는 것이다. float 프로퍼티를 사용할 때 요소의 위치를 고정시키는 position 프로퍼티의 absolute를 사용하면 안된다. 프로퍼티값 Description none 요소를 떠 있게 하지 않는다(기본값) right 요소를 오른쪽으로 이동시킨다 left 요소를 왼쪽으로 이동시킨다 1. 정렬float 프로퍼티를 사용하지 않은 블록 요소들은 수직으로 정렬된다. float: left; 프로퍼티를 사용하면 왼쪽부터 가로 정렬되고, float:right; 프러퍼티를 사용하면 오른쪽부터 가로 정렬 된다. 오른쪽 가로 정렬의 경우, 먼저 기술된 요소가 가장 오른쪽에 출력되므로 출력 순서가 역순이 된다. 12345678910111213141516171819202122232425262728293031323334353637383940414243&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; .box { color: white; font-weight: bold; font-size: 50px; border-radius: 6px; width: 100px; height: 100px; margin: 10px; padding: 10px; } .d1, .d2 { float: left; } .d1 { background: red; } .d2 { background: orange; } .d3, .d4 { float: right; } .d3 { background: red; } .d4 { background: orange; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;box d1&quot;&gt; 1 &lt;/div&gt; &lt;div class=&quot;box d2&quot;&gt; 2 &lt;/div&gt; &lt;div class=&quot;box d3&quot;&gt; 3 &lt;/div&gt; &lt;div class=&quot;box d4&quot;&gt; 4 &lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; result float 프로퍼티는 좌측, 우측 가로 정렬만 할 수 있다. 중앙 가로 정렬은 margin 프로퍼티를 사용해야 한다. 1234div { width: 960px; margin: 0 auto;} 2. widthwidth 프로퍼티의 기본값은 100%이므로 width 프러퍼티값을 지정하지 않은 block 요소는 부모 요소의 가로폭을 가득 채운다. 1234567891011121314151617181920212223242526&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; .box { color: white; font-weight: bold; font-size: 30px; line-height: 50px; height: 50px; margin: 0 10px; padding: 10px; } .d1 { background: red; } .d2 { background: orange; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;box d1&quot;&gt; div &lt;/div&gt; &lt;div class=&quot;box d2&quot;&gt; div &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; result width 프로퍼티를 선언하지 않은 block 레벨 요소에 float 프로퍼티가 선언되면 width가 inline요소와 같이 content에 맞게 최소화되고 요소 위에 떠 있게(부유하게)된다. 123456789101112131415161718192021222324252627&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; .box { color: white; font-weight: bold; font-size: 30px; line-height: 50px; height: 50px; margin: 0 10px; padding: 10px; } .d1 { float: left; background: red; } .d2 { background: orange; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;box d1&quot;&gt; float: left; &lt;/div&gt; &lt;div class=&quot;box d2&quot;&gt; div &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; result 위 예제를 살펴보면 d1 클래스 요소에는 flao: left; 를 선언하였고 d2 클래스 요소에는 float를 선언하지 않았다. 이때 d1 클래스 요소는 width가 inline 요소와 같이 content에 맞게 최소화되고 다음 요소인 d2 클래스 요소 위에 떠 있게(부유하게) 된다. 주의할 것은 d1 클래스 요소가 위에 떠 있게 되어도 d2 클래스 요소의 width는 d1 클래스 요소가 차이한 width 만큼 줄어들지 않고 100%를 유지한다는 것이다. 이는 d2 클래스 요소는 float를 선언하지 않았기 때문에 본래의 width를 유지하기 때문이다. 따라서 d2 클래스 요소는 분래의 width(100%)를 유지한 상태에서 d1 클래스 요소가 그 위에 위치한다. 3.1 float 프로퍼티가 선언된 요소와 float 프로퍼티가 선언되지 않은 요소간 margin이 사라지는 문제위 예제를 보면 두 요소는 차례대로 정렬된 것처럼 보이지만 사실은 float 프로퍼티가 선언된 요소가 다음 요소 위에 떠 있는(부유하고 있는) 상태이다. 따라서 두 요소간의 margin은 제대로 표현되지 않는다. 이것은 두번째 요소에 float 프로퍼티를 선언하지 않았기 때문에 발생하는 박스 모델 상의 문제이다. 이 문제를 해결하는 가장 쉬운 방법은 float 프로퍼티를 선언하지 않은 요소(.d2)에 overflow: hidden 프로퍼티를 선언하는 것이다. overflow: hidden 프로퍼티는 자식 요소가 부모 요소의 영역보다 클 경우 넘치는 부분을 안보이게 해주는 역할을 하는데 여기서는 float 프로퍼티가 없어서 제대로 표현되지 못하는 요소를 제대로 출력해준다. 12345678910111213141516171819202122232425262728&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; .box { color: white; font-weight: bold; font-size: 30px; line-height: 50px; height: 50px; margin: 0 10px; padding: 10px; } .d1 { float: left; background: red; } .d2 { overflow: hidden; background: orange; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;box d1&quot;&gt; float: left; &lt;/div&gt; &lt;div class=&quot;box d2&quot;&gt; div &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; result 두번째 요소에도 float 프로퍼티를 선언하면 overflow: hidden 프로퍼티는 선언하지 않아도 되지만 너비가 최소화 된다. 3.2 float 프로퍼티가 선언된 자식 요소를 포함하는 부모 요소의 높이가 정상적으로 반영되지 않는 문제아래 예제를 보면 float 프로퍼티가 선언된 두개의 자식 요소를 포함하는 부모 요소의 높이가 정상적인 값을 가지지 못하는 문제가 발생한다. float 요소는 일반적인 흐름 상에 존재하지 않기 때문에 float 요소의 높이를 알 수 없기 때문인데 이 문제는 부모 요소 이후에 위치하는 요소의 정렬에 문제를 발생시킨다. 12345678910111213141516171819202122232425262728293031&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; .container { color: white; text-align: center; padding: 10px; background-color: #def0c2; } .d1, .d2 { float: left; width: 50%; padding: 20px 0; } .d1 { background-color: #59b1f6; } .d2 { background-color: #ffb5b4; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;d1&quot;&gt;1&lt;/div&gt; &lt;div class=&quot;d2&quot;&gt;2&lt;/div&gt; &lt;/div&gt; &lt;div style=&quot;background:red;padding:10px;color:white;&quot;&gt;3&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; result 이 문제를 해결하는 가장 쉬운 방법은 float 프로퍼티가 선언된 자식 요소의 부모요소(.container)에 overflow: hidden 프로퍼티를 선언하는 것이다. 1234.container { ... overflow: hidden;} 다른 방법으로 부모 요소(.container)에 float 프로퍼티를 선언하는 방법도 있다. 하지만 부모 요소의 너비 float된 두개의 자식요소의 콘텐츠를 표현할 수 있는 만큼만으로 작게 줄어들게 된다. 권장할 수 있는 방법은 아니다. container 영역이 끝나기 직전 빈 요소를 만들고 clear:both 를 설정하는 방법도 가능하다. 하지만 의미 없는 빈 요소를 사용하여야 하기 때문에 이방법 역시 권장할 수 있는 방법은 아니다. 12345678910111213141516171819202122232425262728293031323334353637&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; .container { color: white; text-align: center; padding: 10px; background-color: #def0c2; /*overflow: hidden;*/ } .d1, .d2 { float: left; width: 50%; padding: 20px 0; } .d1 { background-color: #59b1f6; } .d2 { background-color: #ffb5b4; } .clear { height: 0; clear: both; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;d1&quot;&gt;1&lt;/div&gt; &lt;div class=&quot;d2&quot;&gt;2&lt;/div&gt; &lt;div class=&quot;clear&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;div style=&quot;background:red; padding:10px; color:white;&quot;&gt;3&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; result overflow: hidden; 과 함께 많이 사용되는 방법은 ::after 가상 요소 선택자를 이용하는 것이다. 가상 요소 선택자는 CSS2 문법(:after)과 CSS3 문법(::after)이 있는데 IE8까지 지원하는 CSS2 문법을 사용하는 편이 좋다. 12345678910111213141516171819202122232425262728293031323334353637&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; .container { color: white; text-align: center; padding: 10px; background-color: #def0c2; /*overflow: hidden;*/ } .clearfix:after { content: &quot;&quot;; display: block; clear: both; } .d1, .d2 { float: left; width: 50%; padding: 20px 0; } .d1 { background-color: #59b1f6; } .d2 { background-color: #ffb5b4; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;container clearfix&quot;&gt; &lt;div class=&quot;d1&quot;&gt;1&lt;/div&gt; &lt;div class=&quot;d2&quot;&gt;2&lt;/div&gt; &lt;/div&gt; &lt;div style=&quot;background:red;padding:10px;color:white;&quot;&gt;3&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; result 부모 요소에 위 예제와 같이 사전에 작성한 clearfix 클래스만 추가하거나, 해당 요소를 선택하여 클리어 문법을 선언하면 되기 때문에 가장 깔끔하고 간편하다. 이 방법을 사용하는 것을 추천한다. 12345678910111213.clearfix:after { content: &quot;&quot;; display: block; clear: both;}/* or */selector:after { content: &quot;&quot;; display: block; clear: both;} 또 다른 방법은 float 프로퍼티 대신 display: inline-block; 을 선언하는 것이다. 중의해야 하는 점은 inline-block 프로퍼티 요소를 연속 사용하는 경우, 두 요소 사이에 정의하지 않은 공백(4px)가 자동 지정되는 것이다. 12345678910111213141516171819202122232425262728293031&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; .container { color: white; text-align: center; padding: 10px; background-color: #def0c2; } .d1, .d2 { display: inline-block; width: 50%; padding: 20px 0; } .d1 { background-color: #59b1f6; } .d2 { background-color: #ffb5b4; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;d1&quot;&gt;1&lt;/div&gt; &lt;div class=&quot;d2&quot;&gt;2&lt;/div&gt; &lt;/div&gt; &lt;div style=&quot;background:red;padding:10px;color:white;&quot;&gt;3&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; result 위 예제를 보면 .d1, .d2 요소에 display: inline-block; 을 선언하여 텍스트와 같이 배치되도록 하였지만 두 요소 사이에 정의하지 않은 공백(4px)이 자동 지정되어 부모 요소의 width를 초과하여 가로 정렬이 되지 않았다. 1234567891011121314151617181920212223242526272829303132333435&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; .container { color: white; text-align: center; padding: 10px; background-color: #def0c2; /* 폰트 사이즈를 0으로 지정하여 두 요소 사이에 정의하지 않은 공백을 제거 */ font-size: 0; } .d1, .d2 { display: inline-block; width: 50%; padding: 20px 0; /* 폰트 사이즈를 재지정 */ font-size: 1rem; } .d1 { background-color: #59b1f6; } .d2 { background-color: #ffb5b4; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;d1&quot;&gt;1&lt;/div&gt; &lt;div class=&quot;d2&quot;&gt;2&lt;/div&gt; &lt;/div&gt; &lt;div style=&quot;background:red;padding:10px;color:white;&quot;&gt;3&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; result Referencepoiemaweb.com/css3-float W3C CSS Document","link":"/2021/05/12/css3-day-9/"},{"title":"css3-day-10","text":"CSS3 Inheritance &amp; Cascading스타일의 상속과 적용 우선 순위1. 상속(Inheritance)상속이란 상위(부모, 조상) 요소에 적용된 프로퍼티를 하위(자식, 자손) 요소가 물려 받는 것을 의미한다. 상속 기능이 없다면 각 요소의 Rule set에 프로퍼티를 매번 각각 지정해야 한다. 하지만 모든 프로퍼티가 상속 되는 것은 아니다. 프로퍼티 중에는 상속이 되는 것과 되지 않는 것이 있다. property inherit width/height no margin no padding no border no box-sizing no display no visibility yes opacity yes background no font yes color yes line-height yes text-align yes vertical-align no text-decoration no white-space yes position no top/right/bottom/left no z-index no overflow no float no 1234567891011121314151617181920&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;style&gt; .text-red { color: red; border: 1px solid #bcbcbc; padding: 10px; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;text-red&quot;&gt; &lt;h1&gt;Heading&lt;/h1&gt; &lt;p&gt;Paragraph&lt;strong&gt;strong&lt;/strong&gt;&lt;/p&gt; &lt;button&gt;Button&lt;/button&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; result color는 상속되는 프로퍼티로서 자식 요소는 물론 자손 요소까지 적용된다. 하지만 button처럼 요소에 따라 상속 받지 않는 경우도 존재한다. border, padding은 상속되지 않는 요소에 적용되지 않는다. W3C가 제공하는 Full property table의 Inherited? 가 yes인 프로퍼티만 상속된다. 상속되지 않는 경우(상속받지 않는 요소 또는 상속되지 않는 프로퍼티), inherit 키워드를 사용하여 명시적으로 상속받게 할 수 있다. 123456789101112131415161718192021222324252627&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;style&gt; .text-red { color: red; border: 1px solid #bcbcbc; padding: 10px; } .text-red button { color: inherit; } .text-red p { border: inherit; padding: inherit; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;text-red&quot;&gt; &lt;h1&gt;Heading&lt;/h1&gt; &lt;p&gt;Paragraph&lt;strong&gt;strong&lt;/strong&gt;&lt;/p&gt; &lt;button&gt;Button&lt;/button&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; result 2. 캐스캐이딩(Cascading)요소는 하나 이상의 CSS 선언에 영향을 받을 수 있다. 이때 충돌을 피하기 위해 CSS 전용 우선순위가 필요한데 이를 캐스캐이딩(Cascading Order)이라고 한다. 캐스캐이딩에는 다음과 같이 세가지 규칙이 있다. 중요도CSS가 어디에 선언 되었는지에 따라서 우선순위가 달라진다. 명시도대상을 명확하게 특정할수록 명시도가 높아지고 우선순위가 높아진다. 선언순서선언된 순서에 따라 우선 순위가 적용된다. 즉, 나중에 선언된 스타일이 우선 적용된다. 2.1 중요도CSS가 어디에 선언되었는지에 따라서 우선순위가 달라진다. head 요소 내의 style 요소 head 요소 내의 style 요소 내의 @import 문 &lt;link&gt; 로 연결된 CSS 파일 &lt;link&gt; 로 연결된 CSS 내의 @import 문 브라우저 디폴트 스타일시트 12345/* style.css */body { background-color: red; color: white;} 123456789101112131415&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;style.css&quot;&gt; &lt;style&gt; body { background-color: beige; color: navy; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.&lt;/body&gt;&lt;/html&gt; 2.2 명시도대상을 명확하게 특정할수록 명시도가 높아지고 우선순위가 높아진다. !important &gt; 인라인 스타일 &gt; 아이디 선택자 &gt; 클래스/어트리뷰트/가상 선택자 &gt; 태그 선택자 &gt; 전체 선택자 &gt; 상위 요소에 의해 상속된 속성 1234567891011121314151617&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; p { color: red !important; } #thing { color: blue; } div.food { color: chocolate; } .food { color: green; } div { color: orange; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;p id=&quot;thing&quot;&gt;Will be Red.&lt;/p&gt; &lt;div class=&quot;food&quot;&gt;Will be Chocolate.&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; result 2.3 선언 순서선언된 순서에 따라 우선 순위가 적용된다. 즉, 나중에 선언된 스타일이 우선 적용된다. 12345678910111213141516&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; p { color: blue; } p { color: red; } .red { color: red; } .blue { color: blue; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;p&gt;Will be RED.&lt;/p&gt; &lt;p class=&quot;blue red&quot;&gt;Will be BLUE.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; result Referencepoiemaweb.com/css3-inheritance-cascading W3C CSS Document","link":"/2021/05/14/css3-day-10/"},{"title":"css3-day-12","text":"CSS3 Shadow그림자텍스트나 요소에 그림자(shadow) 효과를 부여하기 위한 프로퍼티를 선언한다. 1. text-shadow텍스트에 그림자 효과를 부여하는 프로퍼티이다. 1선택자 { text-shadow: Horizontal-offset Vertical-offset Blur-Radius Shadow-Color; } 프로퍼티 값 단위 설명 생략 Horizontal-offset px 그림자를 텍스트의 오른쪽으로 지정값만큼 이동시킨다 Vertical-offset px 그림자를 텍스트의 아래로 지정값만큼 이동시킨다 Blur-Radius px 그림자의 흐림정도를 지정한다. 지정값만큼 그림자가 커지고 흐려진다.(양수) 가능 Shadow-Color color 그림자의 색상을 지정한다 가능 1234567891011121314151617181920212223242526272829303132333435363738394041&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; h1:nth-child(1) { text-shadow: 5px 5px; } h1:nth-child(2) { text-shadow: 5px 5px red; } h1:nth-child(3) { text-shadow: 5px 5px 3px red; } h1:nth-child(4) { color: white; text-shadow: 5px 5px 3px black; } h1:nth-child(5) { text-shadow: 0 0 3px red; } /*Multiple Shadows*/ h1:nth-child(6) { text-shadow: 0 0 3px red, 0 0 10px blue; } /*Multiple Shadows*/ h1:nth-child(7) { color: white; text-shadow: 1px 1px 2px black, 0 0 25px blue, 0 0 5px darkblue; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;Text-shadow effect!&lt;/h1&gt; &lt;h1&gt;Text-shadow effect!&lt;/h1&gt; &lt;h1&gt;Text-shadow effect!&lt;/h1&gt; &lt;h1&gt;Text-shadow effect!&lt;/h1&gt; &lt;h1&gt;Text-shadow effect!&lt;/h1&gt; &lt;h1&gt;Text-shadow effect!&lt;/h1&gt; &lt;h1&gt;Text-shadow effect!&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt; result 2.box-shadow요소에 그림자 효과를 부여하는 프로퍼티이다. 1선택자 { box-shadow: Inset Horizontal-offset Vertical-offset Blur-Radius Spread Shadow-Color; } 프로퍼티 값 단위 설명 생략 Inset inset inset 키워드를 지정하면 그림자가 요소 안쪽에 위치한다 가능 Horizontal-offset px 그림자를 텍스트의 오른쪽으로 지정값만큼 이동시킨다 Vertical-offset px 그림자를 텍스트의 아래로 지정값만큼 이동시킨다 Blur-Radius px 그림자의 흐림정도를 지정한다. 지정값만큼 그림자가 커지고 흐려진다.(양수) 가능 Spread px 그림자를 더 크게 확장시킨다.(음수, 양수) 가능 Shadow-Color color 그림자의 색상을 지정한다 가능 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; div { width: 300px; height: 100px; padding: 15px; margin: 20px; background-color: yellow; } /*box-shadow: Inset Horizontal-offset Vertical-offset Blur-Radius Spread Shadow-Color;*/ /* Horizontal-offset Vertical-offset */ div:nth-of-type(1) { box-shadow: 10px 10px; } /* Horizontal-offset Vertical-offset Shadow-Color */ div:nth-of-type(2) { box-shadow: 10px 10px blue; } /* Horizontal-offset Vertical-offset Blur-Radius Shadow-Color */ div:nth-of-type(3) { box-shadow: 10px 10px 5px blue; } /* Horizontal-offset Vertical-offset Blur-Radius Spread Shadow-Color */ div:nth-of-type(4) { box-shadow: 10px 10px 5px 5px blue; } /* Inset Horizontal-offset Vertical-offset Blur-Radius Spread Shadow-Color */ div:nth-of-type(5) { box-shadow: inset 10px 10px 5px 5px blue; } /* Horizontal-offset Vertical-offset Blur-Radius Spread Shadow-Color */ div:nth-of-type(6) { background-color: white; box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19); } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;This is a div element with a box-shadow&lt;/div&gt; &lt;div&gt;This is a div element with a box-shadow&lt;/div&gt; &lt;div&gt;This is a div element with a box-shadow&lt;/div&gt; &lt;div&gt;This is a div element with a box-shadow&lt;/div&gt; &lt;div&gt;This is a div element with a box-shadow&lt;/div&gt; &lt;div&gt;This is a div element with a box-shadow&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; result Referencepoiemaweb.com/css3-shadow css3generator","link":"/2021/05/20/css3-day-12/"},{"title":"css3-day-11","text":"CSS3 Vendor Prefix벤터 프리픽스CSS3 표준으로 확정되기 이전 또는 브라우저 개발사가 실험적으로 제공하는 기능을 사용하기 위해서는 벤터 프리픽스(Vendor Prefix)를 사용하여야 한다. Can I use?에서 제공하는 브라우저별 CSS 지원 정보를 보면 텍스트와 요소의 선택을 방지하는 user-select 프로퍼티는 모든 브라우저에 벤터 프리픽스를 사용하여야 한다. 브라우저의 버전이 올라감에 따라 벤터 프리픽스를 사용하지 않아도 될 수 있다. 그러나 구형 브라우저를 지원하기 위하여 벤터 프리칙스를 사용하여야 할 필요가 있다. CSS property: user-select 123456* { -webkit-user-select: none; /* Chrome all / Safari all */ -moz-user-select: none; /* Firefox all */ -ms-user-select: none; /* IE 10+ */ user-select: none; /* Likely future */} 브라우저 별 벤터 프리픽스는 다음과 같다. Browser Vendor Prefix IE or Edge(12-89) -ms- Edge(90) -webkit- Chrome -webkit- Firefox -moz- Safari -webkit- Opera -o- iOS Safari -webkit- Android Browser -webkit- Chrome for Android -webkit- 많은 브라우저를 위한 벤터 프리픽스를 사용하는 것은 코드의 양을 늘게 하고 또한 브라우저는 거의 매달 업데이트가 이루어지고 있어 불필요한 벤터 프리픽스를 사용할 가능성이 크다. 사용하지 않아도 되는 벤터 프리픽스를 사용하는 것은 성능에도 영향을 주기 때문에 Prefix Free 라이브러리를 사용하는 것은 매우 유용한 방법이다. 사용법은 매우 간단하다. Prefix Free 사이트에서 라이브러리를 다운로드하고 include 하기만 하면 이 후에는 벤터 프리픽스없이 모든 CSS를 사용할 수 있다. 1&lt;script src=&quot;prefixfree.min.js&quot;&gt;&lt;/script&gt;","link":"/2021/05/20/css3-day-11/"}],"tags":[{"name":"html5","slug":"html5","link":"/tags/html5/"},{"name":"asp.net","slug":"asp-net","link":"/tags/asp-net/"},{"name":"c#","slug":"c","link":"/tags/c/"},{"name":"request","slug":"request","link":"/tags/request/"},{"name":"response","slug":"response","link":"/tags/response/"},{"name":"web","slug":"web","link":"/tags/web/"},{"name":"http","slug":"http","link":"/tags/http/"},{"name":"html","slug":"html","link":"/tags/html/"},{"name":"tag","slug":"tag","link":"/tags/tag/"},{"name":"img","slug":"img","link":"/tags/img/"},{"name":"video","slug":"video","link":"/tags/video/"},{"name":"audio","slug":"audio","link":"/tags/audio/"},{"name":"Structure","slug":"Structure","link":"/tags/Structure/"},{"name":"form","slug":"form","link":"/tags/form/"},{"name":"css","slug":"css","link":"/tags/css/"},{"name":"syntax","slug":"syntax","link":"/tags/syntax/"}],"categories":[{"name":"html","slug":"html","link":"/categories/html/"},{"name":"ASP.NET","slug":"ASP-NET","link":"/categories/ASP-NET/"},{"name":"css","slug":"css","link":"/categories/css/"}]}