{"pages":[{"title":"about","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.","link":"/about/"}],"posts":[{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment 깃허브 저장소에 소스 저장하기12345$ git init$ git remote add origin 저장소 주소$ git add .$ git commit -m 'commit msg'$ git push origin master","link":"/2021/04/12/hello-world/"},{"title":"html5 day 1","text":"1. HTML5 HTML(HyperText Markup Language) Markup Language 란? 태그 등을 이용하여 문서나 데이터의 구조를 명기하는 언어의 한가지태그: 문서의 골격에 해당하는 부분을 작성, 원래 텍스트와는 별도로 원고의 교정부호 및 주석을 표현하기 위한 것이었으나 용도가 점차 확장되어 문서의 구조를 표현하는 역할을 하게됨일반적으로는 데이터를 기술하는 정도로만 사용되기 때문에 프로그래밍 언어와는 구분됨 HTML (HyperText Markup Language) 웹페이지를 기술하기 위한 마크업 언어이다. 웹페이지의 내용(content)과 구조(structure)을 담당하는 언어로써 HTML 태그를 통해 정보를 구조화하는 것이다. HTML5 2014년 10월 28일 확정된 차세대 웹 표준으로 아래와 같은 기능들이 추가됨멀티미디어(Multimedia) 플래시와 같은 플러그인의 도움없이 비디오 및 오디오 기능을 자체적으로 지원한다. 그래픽(Graphics &amp; Effects) SVG, 캔버스를 사용한 2차원 그래픽과 CSS3, WebGL을 사용한 3차원 그래픽을 지원한다. 통신(Connectivity) 지금까지의 HTML은 단방향 통신만이 가능하였스나 HTML5는 서버와의 소켓통신을 지원하므로 서버와의 양방향 통신이 가능하다. 디바이스 접근(Device acess) 카메라, 동작센서 등의 하드웨어 기능을 직접적으로 제어할 수 있다. 오프라인 및 저장소(Offline &amp; Storage) 오프라인 상태에서도 애플리케이션을 동작시킬 수 있다. 이는 HTML5가 플랫폼으로서 사용될 수 있음을 의미한다. 시맨틱 태그(Semantics) HTML 요소의 의미를 명확히 설명하는 시맨틱 태그를 도입하여 브라우저, 검색엔진, 개발자 모두에게 콘텐츠의 의미를 명확히 설명할 수 있다. 이를 통해 HTML 요소의 의미를 명확히 해석하고 그 데이터를 활용할 수 있는 시맨틱 웹을 실현할 수 있다. CSS3 CSS3를 지원한다. 2. HTML5의 기본 문법 요소 (Element) HTML요소는 시작태그와 종료태그 그리고 태그사이에 위치한 content로 구성된다.태그는 대소문자를 구별하지 않으나 HTML4의 경우 소문자를 추천하고 있으므로 HTML5에서도 소문자를 사용하는것이 일반적 어브리뷰트 (Attribute) Attribute란 요소의 성질, 특징을 정의하는 명세이다.시작태그에 위치해야 하며 이름과 값의 쌍을 이룬다. 주석 (Comments) 주석은 주로 개발자에게 코드를 설명하기 위해 사용되며 브라우저는 주석을 화면에 표시하지 않는다. 3. 시맨틱 웹 (Semantic Web) - 의미론적 웹? SEO(검색엔진 최적화: Search Engin Optimization) 마케팅 도구를 사용하여 검색엔진이 본인의 웹사이트를 검색하기 알맞은 구조로 웹사이트를 조정하기도 한다.이것은 기본적으로 검색엔진이 웹사이트 정보를 어떻게 수집하는지 아는것으로 부터 시작된다. 검색엔진 검색엔진은 로봇(Robot)이라는 프로그램을 이용해 매일 전세계의 웹사이트 정보를 수집한다.(이것을 크롤링이라 하며 검색엔진의 크롤러가 이를 수행)그리고 검색 사이트 이용자가 검색할 만한 키워드를 미리 예상하여 검색 키워드에 대응하여 검색 키워드에 대응하는 인덱스(색인)을 만들어 둔다.(이것을 인덱싱이라 하며, 검색엔진의 인덱서가 이를 수행)인덱스를 생성할 때 사용되는 정보는 검색 로봇이 수집한 정보인데 결국 웹사이트의 HTML 코드이다.즉, 검색엔진은 HTML 코드만으로 그 의미를 인지하여야 하는데 이때 시맨틱 요소 (Semantic element)를 해석하게 된다. 시맨틱 태그란 브라우저, 검색엔진, 개발자 모두에게 콘텐츠의 의미를 명확히 설명하는 역할을 한다. 시맨틱 웹이란 웹에 존재하는 수많은 웹페이지들에 메타데이터(Metadata)를 부여하여, 기존의 잡다한 데이터 집합이었던 웹페이지를 의미와 관련성을 가지는 거대한 데이터베이스로 구축하고자 하는 발상 HTML 요소는 non-semetic 요소, semantic 요소로 구분할 수 있다. non-semantic 요소: div, span 등이 있으며 이들 태그는 content에 대하여 어떤 설명도 하지 않는다.semantic 요소: form, table, img 등이 있으며 이들 태그는 content의 의미를 명확히 설명한다. 4. HTML5 Tag - Basic 문서 형식 정의 tag HTML5 1&lt;!DOCTYPE html&gt; html tag html 태그는 모든 HTML 요소의 부모 요소이며 웹페이지에 단 하나만 존재한다. 즉, 모든 요소는 html 요소의 자식 요소이며 html 요소 내부에 기술해야한다.단, 1&lt;!DOCTYPE html&gt; 는 예외 head tag head 요소는 메타데이터를 포함하기 위한 요소 1.1 title tag title 요소는 문서의 제목을 정의한다. 정의된 제목은 브라우저의 탭에 표시된다. 1.2 style tag style 요소에는 HTML 문서를 위한 sytle 정보를 정의한다. 1.3 link tag link 요소에는 외부 리소스와의 연계 정보를 정의한다. 주로 HTML과 외부 CSS 파일을 연계에 사용된다. 1.4 script tag script 요소에는 client-side javascript를 정의한다. 1&lt;script src=&quot;main.js&quot;&gt;&lt;/script&gt; 1.5 meta tag meta 요소는 description, keytwords, author, 기타 메타데이터 정의에 사용된다. 메타데이터는 브라우저, 검색엔진(keywords)등에 의해 사용된다.charset 어브리뷰트는 브라우저가 사용할 문자셋을 정의한다. 1&lt;meta charset=&quot;utf-8&quot;&gt; SEO(검색엔진 최적화)를 위해 검색엔진이 사용할 keywords를 정의한다. 1&lt;meta name=&quot;keywords&quot; content=&quot;HTML, CSS, XML, XHTML, JavaScript&quot;&gt; 웹페이지의 설명을 정의한다. 1&lt;meta name=&quot;description&quot; content=&quot;Web tutorials on HTML and CSS&quot;&gt; 웹페이지의 저자를 명기한다. 1&lt;meta name=&quot;author&quot; content=&quot;John Doe&quot;&gt; 웹페이지를 30초 마다 Refresh 한다. 1&lt;meta http-equiv=&quot;refresh&quot; content=&quot;30&quot;&gt; body tag body tag는 HTML 문서의 내용을 나타내며 웹페이지에 단 하나만 존재한다.메타데이터를 제외한 웹페이지를 구성하는 대부분의 요소가 body 요소내에 기술된다. 123&lt;body&gt; Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.&lt;/body&gt; 메타데이터: 메타데이터(metadata)는 데이터(data)에 대한 데이터이다. 이렇게 흔히들 간단히 정의하지만 엄격하게는, Karen Coyle에 의하면 “어떤 목적을 가지고 만들어진 데이터 (Constructed data with a purpose)”라고도 정의한다. SPA: single page application","link":"/2021/04/12/html5-day-1/"},{"title":"html5-day-2","text":"HTML5 Tag - LinkHTML의 핵심 개념인 HyperLinkHyperText의 Hyper는 컴퓨터 용어로서 텍스트 등의 정보가 동일 선상에 있는것이 아니라 다중으로 연결되어 있는 상태를 의미한다.이것은 HTML의 가장 중요한 특징인 Link의 개념과 연결되는데 기존 문서난 텍스트의 선형성, 고정성의 제약에서 벗어나 사용자가 원하는 순서대로 원하는 정보를 취득할 수 있는 기능을 제공한다.한 텍스트에서 다른 텍스트로 건너 뛰어 읽을 수 있는 이 기능을 하이퍼링크(hyperlink) 라 한다. 123456&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;body&gt; &lt;a href=&quot;http://www.google.com&quot;&gt;Visit googole.com!&lt;/a&gt; &lt;/body&gt;&lt;/html&gt; Visit googole.com! 1. href 어트리뷰트href 어트리뷰트는 이동하고자 하는 파일의 위치(경로)를 값으로 받는다. 경로(path)란 파일 시스템 상에서 특정 파일의 위치를 의미한다. 1.1 디렉터리(Directory)디렉터리는 파일과 다른 디렉터리를 갖는 파일 시스템 내의 존재물로서 폴더라고도 불린다. 루트디렉터리파일 시스템 계층 구조 상의 최상위 디렉터리 Unix: / Window: C:\\ 홈 디렉터리시스템의 사용자에게 각각 할당된 개별 디렉터리이다. Unix: /Users/{계정명} Windows: C:\\Users{계정명} 작업디렉터리작업중인 파일의 위치한 디렉터리이다. ./ 부모 디렉터리작업 디렉터리의 부모 디렉토리이다. ../ 1.2 파일 경로(File path)파일 경로는 파일 시스템에서 파일의 위치를 나타내는 방법이다. 경로에는 절대경로와 상대경로가 있다. 절대경로(Absolute path)현재 작업 디렉터리와 관계없이 특정 파일의 절대적인 위치를 가리킨다. 루트 디렉터리를 기준으로 파일의 위치를 나타낸다. http://www.test.com/index.html /Users/img/testImage.png C:\\users\\img\\testImage.png /index.html 상대경로(Relative path) 현재 작업 디렉터리를 기준으로 특정 파일의 상대적인 위치를 가리킨다. ./index.html ../dist/index.js ../../dist/index.js index.html html/index.html href 어트리뷰트에 사용 가능한 값은 아래와 같다. Value Description 절대 URL 웹사이트 URL(href=”https://wontaejang.github.io/&quot;) 상대 URL 자신의 위치를 기준으로 한 대상의 URL (href=”html/about”) fragment identifier 페이지 내의 특정 id를 갖는 요소의 링크 (href=”#top”) 메일 mailto: script href=”javascript:alert(“Hello World”);” 1234567891011&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;body&gt; &lt;a href=&quot;https://www.google.com&quot;&gt;URL&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;html/index.html&quot;&gt;Local file&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;file/test.pdf&quot; download&gt;Download file&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;#top&quot;&gt;fragment identifier&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;mailto:someone@example.com?Subject=Hello again&quot;&gt;Send Mail&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;javascript:alert('Hello World');&quot;&gt;Javascript&lt;/a&gt; &lt;/body&gt;&lt;/html&gt; URL Local file Download file fragment identifier Send Mail Javascript 2. target 어트리뷰트target 어트리뷰트는 링크를 클릭했을 때 윈도우를 어떻게 오픈할 지를 지정한다. Value Description _self 링크를 클릭했을 때 연결문서를 현재 윈도우에서 오픈한다(기본 값) _blank 링크를 클릭했을 때 연결문서를 새로운 윈도우나 탭에서 오픈한다 123456&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;body&gt; &lt;a href=&quot;http://www.google.com&quot; target=&quot;_blank&quot;&gt;Visit google!&lt;/a&gt; &lt;/body&gt;&lt;/html&gt;","link":"/2021/04/13/html5-day-2/"},{"title":"html5-day-3","text":"HTML5 Tag - List &amp; Table목록(list)와 표(Table)형식 표현을 위한 태그1. 목록(List)1.1 순서없는 목록 (Unordered List)1234567891011&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;body&gt; &lt;h2&gt;순서없는 목록 (Unordered List)&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;Coffee&lt;/li&gt; &lt;li&gt;Tea&lt;/li&gt; &lt;li&gt;Milk&lt;/li&gt; &lt;/ul&gt; &lt;/body&gt;&lt;/html&gt; 순서없는 목록 (Unordered List) Coffee Tea Milk 1.2 순서있는 목록(Ordered List)1234567891011&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;body&gt; &lt;h2&gt;순서있는 목록 (Ordered List)&lt;/h2&gt; &lt;ol&gt; &lt;li&gt;Coffee&lt;/li&gt; &lt;li&gt;Tea&lt;/li&gt; &lt;li&gt;Milk&lt;/li&gt; &lt;/ol&gt; &lt;/body&gt;&lt;/html&gt; 순서있는 목록 (Ordered List) Coffee Tea Milk type 어트리뷰트를 사용하여 순서를 나타내는 문자를 지정할 수 있다. Value Description “1” 숫자 (기본값) “A” 대문자 알파벳 “a” 소문자 알파벳 “I” 대문자 로마숫자 “i” 소문자 로마숫자 12345&lt;ol type=&quot;I&quot;&gt; &lt;li value=&quot;2&quot;&gt;Coffee&lt;/li&gt; &lt;li value=&quot;4&quot;&gt;Tea&lt;/li&gt; &lt;li&gt;Milk&lt;/li&gt;&lt;/ol&gt; Coffee Tea Milk start 어트리뷰트로 리스트의 시작값을 지정할 수 있다. 12345&lt;ol start=&quot;3&quot;&gt; &lt;li&gt;Coffee&lt;/li&gt; &lt;li&gt;Tea&lt;/li&gt; &lt;li&gt;Milk&lt;/li&gt;&lt;/ol&gt; Coffee Tea Milk reversed 어트리뷰트를 지정하면 리스트의 순서값을 역으로 표현한다. 12345&lt;ol reversed&gt; &lt;li&gt;Coffee&lt;/li&gt; &lt;li&gt;Tea&lt;/li&gt; &lt;li&gt;Milk&lt;/li&gt;&lt;/ol&gt; Coffee Tea Milk 1.3 중첩 목록12345678910111213141516&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;body&gt; &lt;h2&gt;중첩 목록&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;Coffee&lt;/li&gt; &lt;li&gt;Tea &lt;ol&gt; &lt;li&gt;Black tea&lt;/li&gt; &lt;li&gt;Green tea&lt;/li&gt; &lt;/ol&gt; &lt;/li&gt; &lt;li&gt;Milk&lt;/li&gt; &lt;/ul&gt; &lt;/body&gt;&lt;/html&gt; 중첩 목록 Coffee Tea Black tea Green tea Milk 2. 테이블표(table)를 만들 때 사용하는 태그이다. 과거에는 테이블 태그를 사용하여 레이아웃을 구성하기도 하였으나 모던 웹에서는 주로 공간분할 태그인 div 태그를 사용하여 레이아웃을 구성한다. tag Description table 표를 감싸는 태그 tr 표 내부의 행 (table row) th 행 내부의 제목 셀(table heading) td 행 내부의 일반 셀(table data) 123456789101112131415161718192021222324252627&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;body&gt; &lt;table border=&quot;1&quot;&gt; &lt;tr&gt; &lt;th&gt;First name&lt;/th&gt; &lt;th&gt;Last name&lt;/th&gt; &lt;th&gt;Score&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Jill&lt;/td&gt; &lt;td&gt;Smith&lt;/td&gt; &lt;td&gt;50&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Eve&lt;/td&gt; &lt;td&gt;Jackson&lt;/td&gt; &lt;td&gt;94&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;John&lt;/td&gt; &lt;td&gt;Doe&lt;/td&gt; &lt;td&gt;80&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/body&gt;&lt;/html&gt; First name Last name Score Jill Smith 50 Eve Jackson 94 John Doe 80 테이블 태그의 어트리뷰트는 아래와 같다. attribute Description border 표 테두리 두께 지정 rowspan 해당 셀이 점유하는 행의 수 지정 colspan 해당 셀이 점유하는 열의 수 지정 12345678910111213141516171819202122232425262728293031323334353637383940414243&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;style&gt; table, th, td { border: 1px solid black; border-collapse: collapse; } th, td { padding: 15px; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;h2&gt;2개의 culumn을 span&lt;/h2&gt; &lt;table&gt; &lt;tr&gt; &lt;th&gt;Name&lt;/th&gt; &lt;th colspan=&quot;2&quot;&gt;Telephone&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Bill Gates&lt;/td&gt; &lt;td&gt;555 77 854&lt;/td&gt; &lt;td&gt;555 77 855&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;h2&gt;2개의 row를 span&lt;/h2&gt; &lt;table&gt; &lt;tr&gt; &lt;th&gt;Name:&lt;/th&gt; &lt;td&gt;Bill Gates&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th rowspan=&quot;2&quot;&gt;Telephone:&lt;/th&gt; &lt;td&gt;555 77 854&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;555 77 855&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/body&gt;&lt;/html&gt; table, th, td { border: 1px solid black; border-collapse: collapse; } th, td { padding: 15px; } 2개의 culumn을 span Name Telephone Bill Gates 555 77 854 555 77 855 &lt;h2&gt;2개의 row를 span&lt;/h2&gt; &lt;table&gt; &lt;tr&gt; &lt;th&gt;Name:&lt;/th&gt; &lt;td&gt;Bill Gates&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th rowspan=&quot;2&quot;&gt;Telephone:&lt;/th&gt; &lt;td&gt;555 77 854&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;555 77 855&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;","link":"/2021/04/14/html5-day-3/"},{"title":"check a file exists at a URL(ASP.NET)","text":"web resource를 가져오기 전 HttpWebRequest Class를 이용하여 Head 정보만 가져온다. 123456789101112131415161718192021222324252627string url = &quot;https://www.domain.com/img/test.png&quot;;WebRequest webRequest = WebRequest.Create(url);webRequest.Method = &quot;HEAD&quot;;try{ using (HttpWebResponse response = (HttpWebResponse)webRequest.GetResponse()) { if (response.StatusCode.ToString() == &quot;OK&quot;) { //YOUR_CODE } }}catch(WebException ex){ // error}finally{ // Don't forget to close your response if(response != null) { response.Close(); }} 추가로 일반적인 file path일 경우 1if(File.Exist(path))","link":"/2021/04/19/check-a-file-exists-at-a-URL-ASP-NET/"},{"title":"html5-day-4","text":"HTML5 Tag - Image &amp; Multimedia이미지의 표현과 동영상, 음악 등 멀티미디어를 지원하는 태그1. 이미지웹페이지에 이미지를 삽입하는 경우, img tag를 사용한다. attribute Description src 이미지 파일 경로 alt 이미지 파일이 없을 경우 표시되는 문장 width 이미지의 너비 (CSS에서 지정하는 것이 일반적 height 이미지의 높이 (CSS에서 지정하는 것이 일반적) 1234567&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;body&gt; &lt;img src=&quot;img/cat.png&quot; alt=&quot;cat&quot; width=&quot;100&quot;&gt; &lt;img src=&quot;img/catcat.gif&quot; alt=&quot;이미지가 없습니다.&quot;&gt; &lt;/body&gt;&lt;/html&gt; 2. 미디어2.1 audioaudio 태그는 HTML5에서 새롭게 추가된 태그이다. IE8 이하에서는 사용할 수 없다. attribute Description src 음악 파일 경로 preload 재생 전에 음악 파일을 모두 불러올 것인지 지정 autoplay 음악 파일을 자동 재생 개시할 것인지 지정 loop 음악을 반복할 것인지 지정 controls 음악 재생 도구를 표시할 것인지 지정. 재생 도구의 외관은 브라우저마다 차이가 있다. 123456&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;body&gt; &lt;audio src=&quot;/audio/test.mp3&quot; controls&gt;&lt;/audio&gt; &lt;/body&gt;&lt;/html&gt; 2.2 비디오video 태그는 HTML5에서 새롭게 추가된 태그이다. IE8 이하에서는 사용할 수 없다. attribute Description src 동영상 파일 경로 poster 동영상 준비 중에 표시될 이미지 파일 경로 preload 재생 전에 동영상 파일을 모두 불러올 것인지 지정 autoplay 동영상 파일을 자동 재생 개시할 것인지 지정(Chrome의 경우 mute를 설정해야지만 재생가능) loop 동영상을 반복할 것인지 지정 controls 동영상 재생도구를 표시할 것인지 지정, 재생도구의 외관은 브라우저마다 차이가 있다. width 동영상의 너비를 지정 height 동영상의 높이를 지정 12345&lt;video width=&quot;320&quot; height=&quot;240&quot; controls&gt; &lt;source src=&quot;movie.mp4&quot; type=&quot;video/mp4&quot;&gt; &lt;source src=&quot;movie.ogg&quot; type=&quot;video/ogg&quot;&gt;Your browser does not support the video tag.&lt;/video&gt;","link":"/2021/04/17/html5-day-4/"},{"title":"html5-day-6","text":"HTML5 Tag - Structure웹페이지의 레이아웃을 구성하기 위해 공간을 분할하는 태그웹페이지의 레이아웃을 구성하기 위해서 공간을 분할할 필요가 있다. 공간을 분할할 수 있는 태그는 div, span, table 등이 있는데, 과거에는 table 태그를 사용하여 레이아웃을 구성하기도 하였으나 모던 웹에서는 주로 div를 사용하여 레이아웃을 구성한다. 그런데 div태그는 의미론적으로 어떠한 의미도 가지고 있지 않기 때문에 아래와 같이 HTML5에서 새롭게 추가된 시맨틱 태그를 사용하는 것이 더 나은 방법이나 IE에서 작동하지 않기 때문에 주의가 필요하다. tag Description header 헤더를 의미 nav 네비게이션을 의미 aside 사이드에 위치하는 공간을 의미 section 분문의 여러 내용(article)을 포함하는 공간을 의미 article 본문의 주 내용이 들어가는 공간을 의미 footer 바닥을 의미","link":"/2021/04/19/html5-day-6/"},{"title":"html5-day-5","text":"HTML5 Tag - Forms사용자와의 커뮤니케이션을 위한 폼 태그1.formform 태그는 사용자가 입력한 데이터를 수집하기 위해 사용되며 input, textarea, button, select, checkbox, rado button, submit button 등의 입력 양식 태그를 포함할 수 있다. 12345&lt;form&gt;...form elements (input, checkbox, radio button, submit button...)...&lt;/form&gt; attribute value Description action URL 입력데이터(form data)가 전송될 URL 지정 method get/post 입력 데이터(form data)전달 방식 지정 GET과 POST는 HTTP프로토콜을 이용해서 사용자 입력 데이터를 서버에 전달하는 방식을 나타내며 HTTP request method라 한다. Get GET 방식은 전송 URL에 입력데이터를 쿼리스트링으로 보내는 방식이다.예) http://testURL.com/id=4444&amp;pw=1234 전송 URL 바로 뒤에 ‘?’를 통해 데이터의 시작을 알려주고, key-value형태의 데이터를 추가한다. 1개 이상의 전송데이터는 ‘&amp;’로 구분한다. URL에 전송 데이터가 모두 노출되기 때문에 보안에 문제가 있으며 전송할 수 있는 데이터의 한계가 있다. (최대 255자). REST API에서 GET 메소드는 모든 또는 특정 리소스의 조회를 요청한다. POST POST 방식은 Request Body에 담아 보내는 방식이다.URL에 전송 데이터가 모두 노출되지 않지만 GET에 비해 속도가 느리다.REST API에서 POST 메소드는 특정 리소스의 생성을 요청한다. 12345678910&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;body&gt; &lt;form action=&quot;https://wontaejang.github.io/&quot; method=&quot;get&quot;&gt; ID: &lt;input type=&quot;text&quot; name=&quot;id&quot; value=&quot;1&quot;&gt;&lt;br&gt; username: &lt;input type=&quot;text&quot; name=&quot;username&quot; value=&quot;WT.Jang&quot;&gt;&lt;br&gt; &lt;input type=&quot;submit&quot; value=&quot;Submit&quot;&gt; &lt;/form&gt; &lt;/body&gt;&lt;/html&gt; ID: username: submit button이 클릭되면 input 태그에 입력된 데이터가 form 태그의 method어트리뷰트에 지정된 방식으로 action 어트리뷰트에 지정된 서버측의 처리 로직에 전달 된다. 2.inputinput 태그는 form 태그 중에서 가장 중요한 태그로 사용자로부터 데이터를 입력받기위해 사용된다.input 태그는 다양한 종류가 있는데 type 어트리뷰트에 의해 구분된다. form 태그 내에 존재하여야 입력 데이터를 전송할 수 있으나 ajax를 사용할 시에는 form 태그 내에 존재하지 않아도 된다. 서버에 전송되는 데이터는 name 어트리뷰터를 키로, value 어트리뷰트를 값으로하여 key = value의 형태로 전송된다. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;body&gt; &lt;h3&gt;button&lt;/h3&gt; &lt;input type=&quot;button&quot; value=&quot;Click me&quot; onclick=&quot;alert('Hello world!')&quot;&gt; &lt;hr&gt; &lt;h3&gt;checkbox&lt;/h3&gt; &lt;input type=&quot;checkbox&quot; name=&quot;fruit1&quot; value=&quot;apple&quot; checked&gt; 사과&lt;br&gt; &lt;input type=&quot;checkbox&quot; name=&quot;fruit2&quot; value=&quot;grape&quot;&gt; 포도&lt;br&gt; &lt;input type=&quot;checkbox&quot; name=&quot;fruit3&quot; value=&quot;peach&quot;&gt; 복숭아&lt;br&gt; &lt;hr&gt; &lt;h3&gt;color&lt;/h3&gt; &lt;input type=&quot;color&quot; name=&quot;mycolor&quot;&gt; &lt;hr&gt; &lt;h3&gt;date&lt;/h3&gt; &lt;input type=&quot;date&quot; name=&quot;birthday&quot;&gt; &lt;hr&gt; &lt;h3&gt;datetime&lt;/h3&gt; &lt;input type=&quot;datetime&quot; name=&quot;birthdaytime&quot;&gt; &lt;hr&gt; &lt;h3&gt;datetime-local&lt;/h3&gt; &lt;input type=&quot;datetime-local&quot; name=&quot;birthdaytime&quot;&gt; &lt;hr&gt; &lt;h3&gt;email&lt;/h3&gt; &lt;input type=&quot;email&quot; name=&quot;useremail&quot;&gt; &lt;hr&gt; &lt;h3&gt;file&lt;/h3&gt; &lt;input type=&quot;file&quot; name=&quot;myfile&quot;&gt; &lt;hr&gt; &lt;h3&gt;hidden&lt;/h3&gt; &lt;input type=&quot;hidden&quot; name=&quot;country&quot; value=&quot;Norway&quot;&gt; hidden filed는 사용자에 표시되지 않는다. &lt;hr&gt; &lt;h3&gt;image&lt;/h3&gt; &lt;input type=&quot;image&quot; src=&quot;img/img_submit.gif&quot; alt=&quot;Submit&quot; width=&quot;48&quot; height=&quot;48&quot;&gt; &lt;hr&gt; &lt;h3&gt;month&lt;/h3&gt; &lt;input type=&quot;month&quot; name=&quot;birthdaymonth&quot;&gt; &lt;hr&gt; &lt;h3&gt;number&lt;/h3&gt; &lt;input type=&quot;number&quot; name=&quot;quantity&quot; min=&quot;2&quot; max=&quot;10&quot; step=&quot;2&quot; value=&quot;2&quot;&gt; &lt;hr&gt; &lt;h3&gt;password&lt;/h3&gt; &lt;input type=&quot;password&quot; name=&quot;pwd&quot;&gt; &lt;hr&gt; &lt;h3&gt;radio&lt;/h3&gt; &lt;input type=&quot;radio&quot; name=&quot;gender&quot; value=&quot;male&quot; checked&gt; 남자&lt;br&gt; &lt;input type=&quot;radio&quot; name=&quot;gender&quot; value=&quot;female&quot;&gt; 여자&lt;br&gt; &lt;hr&gt; &lt;h3&gt;range&lt;/h3&gt; &lt;input type=&quot;range&quot; name=&quot;points&quot; min=&quot;0&quot; max=&quot;10&quot; step=&quot;1&quot; value=&quot;5&quot;&gt; &lt;hr&gt; &lt;h3&gt;reset&lt;/h3&gt; &lt;input type=&quot;reset&quot;&gt; &lt;hr&gt; &lt;h3&gt;search&lt;/h3&gt; &lt;input type=&quot;search&quot; name=&quot;googlesearch&quot;&gt; &lt;hr&gt; &lt;h3&gt;submit&lt;/h3&gt; &lt;input type=&quot;submit&quot; value=&quot;Submit&quot;&gt; &lt;hr&gt; &lt;h3&gt;tel&lt;/h3&gt; &lt;input type=&quot;tel&quot; name=&quot;mytel&quot;&gt; &lt;hr&gt; &lt;h3&gt;text&lt;/h3&gt; &lt;input type=&quot;text&quot; name=&quot;myname&quot;&gt; &lt;hr&gt; &lt;h3&gt;time&lt;/h3&gt; &lt;input type=&quot;time&quot; name=&quot;mytime&quot;&gt; &lt;hr&gt; &lt;h3&gt;url&lt;/h3&gt; &lt;input type=&quot;url&quot; name=&quot;myurl&quot;&gt; &lt;hr&gt; &lt;h3&gt;week&lt;/h3&gt; &lt;input type=&quot;week&quot; name=&quot;week_year&quot;&gt; &lt;/body&gt;&lt;/html&gt; button checkbox 사과 포도 복숭아 color date datetime datetime-local email file hidden hidden filed는 사용자에 표시되지 않는다. image month number password radio 남자 여자 range reset search submit tel text time url week 3. select복수개의 리스트에서 복수개의 아이템을 선택할 때 사용한다. 함께 사용할 수 있는 태그는 다음과 같다. 서버에 전송되는 데이터는 select 요소의 name 어트리뷰트를 키로, option 요소의 value 어트리뷰트를 값으로 하여 key=value의 형태로 전송된다. tag Description select select form 생성 option option 생성 optgroup option을 그룹화한다. 1234567891011121314151617181920212223242526272829&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;body&gt; &lt;select name=&quot;cars1&quot;&gt; &lt;option value=&quot;volvo&quot; selected&gt;Volvo&lt;/option&gt; &lt;option value=&quot;saab&quot; disabled&gt;Saab&lt;/option&gt; &lt;option value=&quot;fiat&quot;&gt;Fiat&lt;/option&gt; &lt;option value=&quot;audi&quot;&gt;Audi&lt;/option&gt; &lt;/select&gt; &lt;select name=&quot;cars2&quot; size=&quot;4&quot; multiple&gt; &lt;option value=&quot;volvo&quot;&gt;Volvo&lt;/option&gt; &lt;option value=&quot;saab&quot;&gt;Saab&lt;/option&gt; &lt;option value=&quot;fiat&quot;&gt;Fiat&lt;/option&gt; &lt;option value=&quot;audi&quot; selected&gt;Audi&lt;/option&gt; &lt;/select&gt; &lt;select name=&quot;cars3&quot;&gt; &lt;optgroup label=&quot;Swedish Cars&quot;&gt; &lt;option value=&quot;volvo&quot;&gt;Volvo&lt;/option&gt; &lt;option value=&quot;saab&quot;&gt;Saab&lt;/option&gt; &lt;/optgroup&gt; &lt;optgroup label=&quot;German Cars&quot; disabled&gt; &lt;option value=&quot;mercedes&quot;&gt;Mercedes&lt;/option&gt; &lt;option value=&quot;audi&quot;&gt;Audi&lt;/option&gt; &lt;/optgroup&gt; &lt;/select&gt; &lt;/body&gt;&lt;/html&gt; Volvo Saab Fiat Audi Volvo Saab Fiat Audi Volvo Saab Mercedes Audi 4. textareatextarea 태그는 여러 줄의 글자를 입력할 때 사용한다. 123456&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;body&gt; &lt;textarea name=&quot;message&quot; rows=&quot;10&quot; cols=&quot;30&quot;&gt;Write something here&lt;/textarea&gt; &lt;/body&gt;&lt;/html&gt; Write something here 5. buttonbutton 태그는 클릭할 수 있는 버튼을 생성한다. &lt;input type=&quot;button&quot;&gt; 과 유사하지만 input 태그는 빈 태그인 반면 button 태그는 그렇지 않다. 따라서 button 요소에는 텍스트나 이미지 같은 콘텐츠를 사용할 수 있다. type 어트리뷰트는 반드시 지정하는 것이 바람직하며 어트리뷰트 값으로 button, reset, submit를 지정할 수 있다. 12345678&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;body&gt; &lt;button type=&quot;button&quot; onclick=&quot;alert('Hello World!')&quot;&gt;Click Me!&lt;/button&gt; &lt;input type=&quot;button&quot; value=&quot;Click Me!&quot; onclick=&quot;alert('Hello world!')&quot;&gt; &lt;/body&gt;&lt;/html&gt; Click Me! button 태그는 어트리뷰트만을 받아들이는 input 태그와 달리 콘텐츠로 문자열은 물론 HTML 요소를 받을 수도 있다는 장점이 있다. submit의 경우 브라우저마다 다를 수 있다. 1&lt;button type=&quot;submit&quot; name=&quot;myButton&quot; value=&quot;foo&quot;&gt;Click me&lt;/button&gt; 6.fieldset / legendfieldset 태그는 관련된 입력 양식들을 그룹화 할 때 사용한다. legend 태그는 fieldset 태그 내에서 사용되야 하며 그룹화된 fieldset의 제목을 정의한다. 12345678910111213&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;/head&gt; &lt;body&gt; &lt;fieldset&gt; &lt;legend&gt;Login&lt;/legend&gt; Username &lt;input type=&quot;text&quot; name=&quot;username&quot;&gt; Password &lt;input type=&quot;text&quot; name=&quot;password&quot;&gt; &lt;/fieldset&gt; &lt;/body&gt;&lt;/html&gt; Login Username Password","link":"/2021/04/18/html5-day-5/"},{"title":"css3-day-1","text":"CSS3 SyntaxCSS 기본 문법CSS(Cascading Style Sheets)는 HTML이나 XML과 같은 구조화 된 문서(Document)를 화면, 종이 등에 어떻게 렌더링할 것인지를 정의하기 위한 언어이다. 즉, CSS는 HTML의 각 요소(Element)의 style(design, layout etc)을 정의하여 화면(Screen)등에 어떻게 렌더링하면 되는지 브라우저에게 설명하기 위한 언어이다. HTML5 이전 버전의HTML에는 style을 컨트롤할 수 있는 태그(font, center)가 존재하여 CSS가 없이도 어느정도의 스타일 표현이 가능하였으나 정보와 구조를 담당하는 HTML의 본연의 역할과 동떨어진 기능까지 추가됨으로서 복잡하고 혼란스러운 언어가 되어 버렸다. HTML5에서는 HTML는 정보와 구조화, CSS는 styling의 정의라는 본연의 임무에 충실한 명확한 구분이 이루어졌다. HTML과 CSS는 각자의 문법을 갖는 별개의 언어이며 HTML은 CSS를 포함할 수 있다. 그러나 HTML없이 단독으로 존재하는 CSS는 의미가 없다. 새로운 언어를 학습할 때에는 먼저 용어에 익숙해져야 할 필요가 있다. CSS3의 용어에 대해 알아보도록 하자. 셀렉터 (Selector, 선택자) CSS는 HTML 요소의 style(design, layout etc)을 정의하는데 사용된다. 이를 위해서 선행되어야하는 것은 스타일을 적용하고자 하는 HTML 요소를 선택할 수 있어야 한다. 셀렉터는 스타일을 적용하고자 하는 HTML요소를 선택하기 위해 CSS에서 제공하는 수단이다. 위와 같은 구문을 Rule Set(또는 Rule)이라 하며 셀렉터에 의해 선택된 특정 HTML 요소를 어떻게 렌더링(Rendering)할 것인지 브라우저에 지시하는 역할을 한다. 위의 CSS Rule set은 HTML 문서에 속해 있는 셀렉터를 통해 모든 h1 요소를 선택한 후 선택된 h1 요소의 스타일을 선언 블록에서 정의하고 있다. 이와 같은 Rule Set의 집합을 스타일시트(Style Sheet)라 한다. 2. 프로퍼티 (Property / 속성)셀릭터로 HTML 요소를 선택하고 {}내에 프로퍼티(속성)와 값을 지정하는 거으로 다양한 style을 정의 할 수 있다. 프로퍼티는 표준 스펙으로 이미 지정되어 있는 것을 사용하여야 하며 사용자가 임의로 정의할 수 없다. 여러개의 프로퍼티를 연속해서 지정할 수 있으며 세미콜론(;)으로 구분한다. 1234p { color: ...; font-size: ...;} 3. 값 (Value / 속성값)셀렉터로 지정한 HTML 요소에 style을 적용하기 위해 프로퍼티를 사용했다. 프로퍼티의 값은 해당 프로퍼티에 사용할 수 있는 값을 “키워드”나 “크기 단위” 또는 “색상 표현 단위”등의 특정 단위로 지정하여야 한다. 1234p { color: orange; font-size: 16px;} 4. HTML과 CSS의 연동HTML은 CSS를 포함할 수 있다. CSS를 가지고 있지 않은 HTML은 브라우저에서 기본으로 적용하는 CSS(user agent stylesheet)에 의해 렌더링된다. 4.1 Link styleHTML에서 외부에 있는 CSS 파일을 로드하는 방식이다. 가장 일반적으로 사용된다. 12345678910&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;css/style.css&quot;&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;Hello World&lt;/h1&gt; &lt;p&gt;This is a web page.&lt;/p&gt; &lt;/body&gt;&lt;/html&gt; 12h1 { color: red; }p { background: blue; } 4.2 Embedding styleHTML 내부에 CSS를 포함시키는 방식이다. 매우 간단한 웹페이지의 경우는 문제될 것이 없겠지만 Link style을 사용하는 편이 좋다. HTML과 CSS는 서로 역할이 다르므로 다른 파일로 구분되어 작성하고 관리되는 것이 바람직하다. 12345678910111213&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;style&gt; h1 { color: red; } p { background: aqua; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;Hello World&lt;/h1&gt; &lt;p&gt;This is a web page.&lt;/p&gt; &lt;/body&gt;&lt;/html&gt; 4.3 Inline styleHTML요소의 style 프로퍼티에 CSS를 기술하는 방식이다. JavaScript가 동적으로 CSS를 생성할 때 사용하는 경우가 있다. 하지만 일반적인 경우 Link style을 사용하는 편이 좋다. 1234567&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;body&gt; &lt;h1 style=&quot;color: red&quot;&gt;Hello World&lt;/h1&gt; &lt;p style=&quot;background: aqua&quot;&gt;This is a web page.&lt;/p&gt; &lt;/body&gt;&lt;/html&gt; Hello World This is a web page. 5. Reset CSS 사용하기모든 웹 브라우저는 디폴트 스타일(브라우저가 내장하고 있는 기본 스타일)을 가지고 있어 CSS가 없어도 작동한다. 그런데 웹브라우저에 따라 디폴트 스타일이 상이하고 지원하는 tag나 style도 제각각이어서 주의가 필요하다. Reset CSS는 기본적인 HTML 요소의 CSS를 초기화하는 용도로 사용한다. 즉, 브라우저 별로 제각각인 디폴트 스타일을 하나의 스타일로 통일시켜 주는 역할을 한다. 자주 사용되는 Reset CSS는 다음과 같다. Eric Meyer’s reset normalize.css 6. CSS Versions Version Year CSS3 2005 CSS2 1998 CSS1 1996 참조 사이트: https://poiemaweb.com/css3-syntax","link":"/2021/04/20/css3-day-1/"},{"title":"css3-day-2","text":"CSS3 SelectorSelectorCSS(Cascading Style Sheets)는 HTML 요소(Element)의 style(design, layout etc)을 정의한다. 그리하려면 HTML이 존재하여야 하고 또한 style을 적용하고자하는 HTML 요소를 특정할 필요가 있다. 이러한 목적으로 사용되는 것이 셀렉터(Selector)이다. 즉, style을 적용하고자 하는 HTML 요소를 셀렉터로 특정하고 선택된 요소에 스타일을 정의하는 것이다. 출처: https://www.w3schools.com/css/css_syntax.asp 12345678910111213 &lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; h1 { color: red; } p { color: blue; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;Hello World!&lt;/h1&gt; &lt;p&gt;This paragraph is styled with CSS.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; Hello World! This paragraph is styled with CSS. 복수개의 셀렉터를 연속하여 지정할 수 있으며 쉼표(,)로 구분한다. 1h1, p { color: red; } 1. 전체 셀렉터 (Universal Selector) 패턴 Description * HTML 문서 내의 모든 요소를 선택한다. html 요소를 포함한 모든 요소가 선택된다. (head 요소도 포함된다) 1234567891011121314151617&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; /* 모든 요소를 선택 */ * { color: red; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;Heading&lt;/h1&gt; &lt;div&gt; &lt;p&gt;paragraph 1&lt;/p&gt; &lt;p&gt;paragraph 2&lt;/p&gt; &lt;/div&gt; &lt;p&gt;paragraph 3&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; result 2. 태그 셀렉터 (Type Selector) 패턴 Description 태그명 지정된 태그명을 가지는 요소를 선택한다. 지정된 태그명을 가지는 요소를 선택한다. 1234567891011121314151617&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; /* 모든 p 태그 요소를 선택 */ p { color: red; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;Heading&lt;/h1&gt; &lt;div&gt; &lt;p&gt;paragraph 1&lt;/p&gt; &lt;p&gt;paragraph 2&lt;/p&gt; &lt;/div&gt; &lt;p&gt;paragraph 3&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; result 3. ID 셀렉터 (ID Selector) 패턴 Description #id 어트리뷰트 값 id 어프리뷰트 값을 지정하여 일치하는 요소를 선택한다. id 어트리뷰트 값은 중복될 수 없는 유일한 값이다. 1234567891011121314151617&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; /* id 어트리뷰트 값이 p1인 요소를 선택 */ #p1 { color: red; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;Heading&lt;/h1&gt; &lt;div class=&quot;container&quot;&gt; &lt;p id=&quot;p1&quot;&gt;paragraph 1&lt;/p&gt; &lt;p id=&quot;p2&quot;&gt;paragraph 2&lt;/p&gt; &lt;/div&gt; &lt;p&gt;paragraph 3&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; result 4. 클래스 셀렉터 (Class Selector) 패턴 Description .class 어트리뷰트 값 class 어트리뷰트 값을 지정하여 일치하는 요소를 선택한다. class 어트리뷰트 값은 중복될 수 있다. 1234567891011121314151617181920&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; /* class 어트리뷰트 값이 container인 모든 요소를 선택 */ /* color 어트리뷰트는 자식 요소에 상속된다. */ .container { color: red; } /* not supported in IE */ #p2 { color: initial; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;Heading&lt;/h1&gt; &lt;div class=&quot;container&quot;&gt; &lt;p id=&quot;p1&quot;&gt;paragraph 1&lt;/p&gt; &lt;p id=&quot;p2&quot;&gt;paragraph 2&lt;/p&gt; &lt;/div&gt; &lt;p&gt;paragraph 3&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; result HTML 요소에 class 어트리뷰트 값은 공백으로 구분하여 여러 개 지정할 수 있다. 아래와 같이 클래스 셀렉터를 사용하여 미리 스타일을 정의해 두고, HTML 요소는 이미 정의되어 있는 클래스를 지정하는 것으로 필요한 스타일을 지정할 수 있다. 이것은 재사용의 측면에서 유용하다. 1234567891011121314151617181920&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; /* class 어트리뷰트 값이 text-center인 모든 요소를 선택 */ .text-center { text-align: center; } /* class 어트리뷰트 값이 text-large인 모든 요소를 선택 */ .text-large { font-size: 200%; } /* class 어트리뷰트 값이 text-red인 모든 요소를 선택 */ .text-red { color: red; } /* class 어트리뷰트 값이 text-blue인 모든 요소를 선택 */ .text-blue { color: blue; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;p class=&quot;text-center&quot;&gt;Center&lt;/p&gt; &lt;p class=&quot;text-large text-red&quot;&gt;Large Red&lt;/p&gt; &lt;p class=&quot;text-center text-large text-blue&quot;&gt;Center Large Blue&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; result 5. 어트리뷰트 셀렉터 (Attribute Selector) 패턴 Description 셀렉터[어트리뷰트] 지정된 어트리뷰트를 갖는 모든 요소를 선택한다. 1234567891011121314&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; /* a 요소 중에 href 어트리뷰트를 갖는 모든 요소 */ a[href] { color: red; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;a href=&quot;http://www.poiemaweb.com&quot;&gt;poiemaweb.com&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;http://www.google.com&quot; target=&quot;_blank&quot;&gt;google.com&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;http://www.naver.com&quot; target=&quot;_top&quot;&gt;naver.com&lt;/a&gt;&lt;/body&gt;&lt;/html&gt; result 패턴 Description 셀렉터[어트리뷰트=”값”] 지정된 어트리뷰트를 가지며 지정된 값과 어트리뷰트의 값이 일치하는 모든 요소를 선택한다. 1234567891011121314&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; /* a 요소 중에 target 어트리뷰트의 값이 &quot;_blank&quot;인 모든 요소 */ a[target=&quot;_blank&quot;] { color: red; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;a href=&quot;https://wontaejang.github.io&quot;&gt;wontaejang.github.io&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;http://www.google.com&quot; target=&quot;_blank&quot;&gt;google.com&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;http://www.naver.com&quot; target=&quot;_top&quot;&gt;naver.com&lt;/a&gt;&lt;/body&gt;&lt;/html&gt; result 패턴 Description 셀렉터[어트리뷰트~=”값”] 지정된 어트리뷰트의 값이 지정된 값을 (공백으로 분리된) 단어로 포함하는 요소를 선택한다. 123456789101112131415&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; /* h1 요소 중에 title 어트리뷰트 값에 &quot;first&quot;를 단어로 포함하는 요소 */ h1[title~=&quot;first&quot;] { color: red; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h1 title=&quot;heading first&quot;&gt;Heading first&lt;/h1&gt; &lt;h1 title=&quot;heading-first&quot;&gt;Heading-first&lt;/h1&gt; &lt;h1 title=&quot;heading second&quot;&gt;Heading second&lt;/h1&gt; &lt;h1 title=&quot;heading third&quot;&gt;Heading third&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt; result 패턴 Description 셀렉터[어트리뷰트|=”값”] 지정된 어트리뷰트의 값과 일치하거나 지정 어트리뷰트 값 뒤 연이은 하이픈(“값-“)으로 시작하는 요소를 선택한다. 12345678910111213141516&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; /* p 요소 중에 lang 어트리뷰트 값이 &quot;en&quot;과 일치하거나 &quot;en-&quot;로 시작하는 요소 */ p[lang|=&quot;en&quot;] { color: red; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;p lang=&quot;en&quot;&gt;Hello!&lt;/p&gt; &lt;p lang=&quot;en-us&quot;&gt;Hi!&lt;/p&gt; &lt;p lang=&quot;en-gb&quot;&gt;Ello!&lt;/p&gt; &lt;p lang=&quot;us&quot;&gt;Hi!&lt;/p&gt; &lt;p lang=&quot;no&quot;&gt;Hei!&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; result 패턴 Description 셀렉터[어트리뷰트^=”값”] 지정된 어트리뷰트 값으로 시작하는 요소를 선택한다. 12345678910111213&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; /* a 요소 중에 href 어트리뷰트 값이 &quot;https://&quot;로 시작하는 요소 */ a[href^=&quot;https://&quot;] { color: red; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;a href=&quot;https://www.test.com&quot;&gt;https://www.test.com&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;http://www.test.com&quot;&gt;http://www.test.com&lt;/a&gt;&lt;/body&gt;&lt;/html&gt; result 패턴 Description 셀렉터[어트리뷰트$=”값”] 지정된 어트리뷰트 값으로 끝나는 요소를 선택한다. result 패턴 Description 셀렉터[어트리뷰트*=”값”] 지정된 어트리뷰트 값을 포함하는 요소를 선택한다. 1234567891011121314151617&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; /* div 요소 중에서 class 어트리뷰트 값에 &quot;test&quot;를 포함하는 요소 */ div[class*=&quot;test&quot;] { color: red; } /* div 요소 중에서 class 어트리뷰트 값에 &quot;test&quot;를 단어로 포함하는 요소 */ div[class~=&quot;test&quot;] { background-color: yellow; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;first_test&quot;&gt;The first div element.&lt;/div&gt; &lt;div class=&quot;second&quot;&gt;The second div element.&lt;/div&gt; &lt;div class=&quot;test&quot;&gt;The third div element.&lt;/div&gt; &lt;p class=&quot;test&quot;&gt;This is some text in a paragraph.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; result 6. 복합 셀렉터 (Combinator)6.1 후손 셀렉터 (Descendant Combinator)자신의 1level 상위에 속하는 요소를 부모 요소, 1level 하위에 속하는 요소를 자손 요소(자식 요소) 라 한다. 자신보다 n level 하위에 속하는 요소는 후손 요소(하위 요소) 라 한다. 후손 셀렉터는 셀렉터A의 모든 후손(하위) 요소 중 셀렉터B와 일치하는 요소를 선택한다. 1셀렉터A 셀렉터B 123456789101112131415161718&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; /* div 요소의 후손요소 중 p 요소 */ div p { color: red; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;Heading&lt;/h1&gt; &lt;div&gt; &lt;p&gt;paragraph 1&lt;/p&gt; &lt;p&gt;paragraph 2&lt;/p&gt; &lt;span&gt;&lt;p&gt;paragraph 3&lt;/p&gt;&lt;/span&gt; &lt;/div&gt; &lt;p&gt;paragraph 4&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; result 6.2 자식 셀렉터 (Child Combinator)자손 셀렉터는 셀렉터A의 모든 자식 요소중 셀렉터B와 일치하는 요소를 선택한다. 1셀렉터A &gt; 셀렉터B 123456789101112131415161718&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; /* div 요소의 자식요소 중 p 요소 */ div &gt; p { color: red; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;Heading&lt;/h1&gt; &lt;div&gt; &lt;p&gt;paragraph 1&lt;/p&gt; &lt;p&gt;paragraph 2&lt;/p&gt; &lt;span&gt;&lt;p&gt;paragraph 3&lt;/p&gt;&lt;/span&gt; &lt;/div&gt; &lt;p&gt;paragraph 4&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; result 6.3 형제(동위) 셀렉터 (Sibling Combinator)형제(동위) 셀렉터는 형제 관계(동위 관계)에서 뒤에 위치하는 요소를 선택할 때 사용한다. 6.3.1 인접 형제 셀렉터 (Adjacent Sibling Combinator)셀렉터A의 형제 요소 중 셀렉터A 바로 뒤에 위치하는 셀렉터B 요소를 선택한다. A와 B 사이에 다른요소가 존재하면 선택되지 않는다. 1셀렉터A + 셀렉터B 12345678910111213141516171819202122232425262728293031&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; /* p 요소의 형제 요소 중에 p 요소 바로 뒤에 위치하는 ul 요소를 선택한다. */ p + ul { color: red; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;A div element.&lt;/div&gt; &lt;ul&gt; &lt;li&gt;Coffee&lt;/li&gt; &lt;li&gt;Tea&lt;/li&gt; &lt;li&gt;Milk&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The first paragraph.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Coffee&lt;/li&gt; &lt;li&gt;Tea&lt;/li&gt; &lt;li&gt;Milk&lt;/li&gt; &lt;/ul&gt; &lt;h2&gt;Another list&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;Coffee&lt;/li&gt; &lt;li&gt;Tea&lt;/li&gt; &lt;li&gt;Milk&lt;/li&gt; &lt;/ul&gt;&lt;/body&gt;&lt;/html&gt; result 6.3.2 일반 형제 셀렉터 (General Sibling Combinator)셀렉터A의 형제 요소 중 셀렉터A 뒤에 위치하는 셀렉터B 요소를 모두 선택한다. 1셀렉터A ~ 셀렉터B 12345678910111213141516171819202122232425262728293031&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; /* p 요소의 형제 요소 중에 p 요소 뒤에 위치하는 ul 요소를 모두 선택한다.*/ p ~ ul { color: red; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;A div element.&lt;/div&gt; &lt;ul&gt; &lt;li&gt;Coffee&lt;/li&gt; &lt;li&gt;Tea&lt;/li&gt; &lt;li&gt;Milk&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The first paragraph.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Coffee&lt;/li&gt; &lt;li&gt;Tea&lt;/li&gt; &lt;li&gt;Milk&lt;/li&gt; &lt;/ul&gt; &lt;h2&gt;Another list&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;Coffee&lt;/li&gt; &lt;li&gt;Tea&lt;/li&gt; &lt;li&gt;Milk&lt;/li&gt; &lt;/ul&gt;&lt;/body&gt;&lt;/html&gt; result 7. 가상 클래스 셀렉터 (Pseudo-Class Selector)가상 클래스는 요소의 특정 상태에 따라 스타일을 정의할 때 사용된다. 특정 상태란 예를 들어 다음과 같다. 마우스가 올라와 있을때 링크를 방문했을 때와 아직 방문하지 않았을 때 포커스가 들어와 있을 때 이러한 특정 상태에는 원래 클래스가 존재하지 않지만 가상 클래스를 임의로 지정하여 선택하는 방법이다. 가상 클래스는 마침표(.) 대신 콜론(:)을 사용한다. CSS 표준에 의해 미리 정의된 이름이 있기 때문에 임의의 이름을 사용할 수 없다. 123selector:pseudo-class { property: value;} 다음은 div 요소가 hover 상태일 때 (마우스가 올라와 있을 때) background-color를 yellow로 지정하는 예이다. 123456789101112131415&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; /* a 요소가 hover 상태일 때 */ a:hover { color: red; } /* input 요소가 focus 상태일 때 */ input:focus { background-color: yellow; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;a href=&quot;#&quot;&gt;Hover me&lt;/a&gt;&lt;br&gt;&lt;br&gt; &lt;input type=&quot;text&quot; placeholder=&quot;focus me&quot;&gt;&lt;/body&gt;&lt;/html&gt; result 7.1 링크 셀렉터(Link pseudo-classes), 동적 셀렉터(User action pseudo-classes) pseudo-class Description :link 셀렉터가 방문하지 않은 링크일 때 :visited 셀렉터가 방문한 링크일 때 :hover 셀렉터에 마우스가 올라와 있을 때 :active 셀렉터가 클릭된 상태일 때 :focus 셀렉터에 포커스가 들어와 있을 때 1234567891011121314151617181920212223242526272829&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; /* a 요소가 방문하지 않은 링크일 때 */ a:link { color: orange; } /* a 요소가 방문한 링크일 때 */ a:visited { color: green; } /* a 요소에 마우스가 올라와 있을 때 */ a:hover { font-weight: bold; } /* a 요소가 클릭된 상태일 때 */ a:active { color: blue; } /* text input 요소와 password input 요소에 포커스가 들어와 있을 때 */ input[type=text]:focus, input[type=password]:focus { color: red; } &lt;/style&gt; &lt;/head&gt;&lt;body&gt; &lt;a href=&quot;#&quot; target=&quot;_blank&quot;&gt;This is a link&lt;/a&gt;&lt;br&gt; &lt;input type=&quot;text&quot; value=&quot;I'll be red when focused&quot;&gt;&lt;br&gt; &lt;input type=&quot;password&quot; value=&quot;I'll be red when focused&quot;&gt;&lt;/body&gt;&lt;/html&gt; result 7.2 UI 요소 상태 셀렉터(UI element state pseudo-classes) pseudo-class Description :checked 셀렉터가 체크 상태일 때 :enabled 셀렉터가 사용 가능한 상태일 때 :disabled 셀렉터가 사용 불가능한 상태일 때 1234567891011121314151617181920212223242526272829303132&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; /* input 요소가 사용 가능한 상태일 때, input 요소 바로 뒤에 위치하는 인접 형제 span 요소를 선택 */ input:enabled + span { color: blue; } /* input 요소가 사용 불가능한 상태일 때, input 요소 바로 뒤에 위치하는 인접 형제 span 요소를 선택 */ input:disabled + span { color: gray; text-decoration: line-through; } /* input 요소가 체크 상태일 때, input 요소 바로 뒤에 위치하는 인접 형제 span 요소를 선택 */ input:checked + span { color: red; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;input type=&quot;radio&quot; checked=&quot;checked&quot; value=&quot;male&quot; name=&quot;gender&quot;&gt; &lt;span&gt;Male&lt;/span&gt;&lt;br&gt; &lt;input type=&quot;radio&quot; value=&quot;female&quot; name=&quot;gender&quot;&gt; &lt;span&gt;Female&lt;/span&gt;&lt;br&gt; &lt;input type=&quot;radio&quot; value=&quot;neuter&quot; name=&quot;gender&quot; disabled&gt; &lt;span&gt;Neuter&lt;/span&gt;&lt;hr&gt; &lt;input type=&quot;checkbox&quot; checked=&quot;checked&quot; value=&quot;bicycle&quot;&gt; &lt;span&gt;I have a bicycle&lt;/span&gt;&lt;br&gt; &lt;input type=&quot;checkbox&quot; value=&quot;car&quot;&gt; &lt;span&gt;I have a car&lt;/span&gt;&lt;br&gt; &lt;input type=&quot;checkbox&quot; value=&quot;motorcycle&quot; disabled&gt; &lt;span&gt;I have a motorcycle&lt;/span&gt;&lt;/body&gt;&lt;/html&gt; result 7.3 구조 가상 클래스 (Structural pseudo-classes) pseudo-class Description :first-child 셀렉터에 해당하는 모든 요소 중 첫번째 자식인 요소를 선택한다. :last-child 셀렉터에 해당하는 모든 요소 중 마지막 자식인 요소를 선택한다. 12345678910111213141516171819202122232425&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; /* p 요소 중에서 첫번째 자식을 선택 */ p:first-child { color: red; } /* p 요소 중에서 마지막 자식을 선택 */ /* body 요소의 두번째 p 요소는 마지막 자식 요소가 아니다. body 요소의 마지막 자식 요소는 div 요소이다. */ p:last-child { color: blue; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;p&gt;This paragraph is the first child of its parent (body).&lt;/p&gt; &lt;h1&gt;Welcome to My Homepage&lt;/h1&gt; &lt;p&gt;This paragraph is not the first child of its parent.&lt;/p&gt; &lt;div&gt; &lt;p&gt;This paragraph is the first child of its parent (div).&lt;/p&gt; &lt;p&gt;This paragraph is not the first child of its parent.&lt;/p&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; result pseudo-class Description :nth-child(n) 셀렉터에 해당하는 모든 요소 중 앞에서 n 번째 자식인 요소를 선택한다. :nth-last-child(n) 셀렉터에 해당하는 모든 요소중 뒤에서 n번째 자식인 요소를 선택한다. n은 0부터 시작하는 정수이다.|n|2n+1|2n-1|3n-2|3n+1|-n+5||-|—-|—-|—-|—-|—-||0|1|-1|-2|1|5||1|3|1|1|4|4||2|5|3|4|7|3||3|7|5|7|10|2||4|9|7|10|13|1||5|11|9|13|16|0| 0과 음수는 생략되기 때문에 2n+1과 2n-1, 3n-2와 3n+1은 결과적으로 같은 수열을 생성한다. 12345678910111213141516171819202122232425262728293031323334353637383940414243&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; /* ol 요소의 자식 요소인 li 요소 중에서 짝수번째 요소만을 선택 */ ol &gt; li:nth-child(2n) { color: orange; } /* ol 요소의 자식 요소인 li 요소 중에서 홀수번째 요소만을 선택 */ ol &gt; li:nth-child(2n+1) { color: green; } /* ol 요소의 자식 요소인 li 요소 중에서 첫번쨰 요소만을 선택 */ ol &gt; li:first-child { color: red; } /* ol 요소의 자식 요소인 li 요소 중에서 마지막 요소만을 선택 */ ol &gt; li:last-child { color: blue; } /* ol 요소의 자식 요소인 li 요소 중에서 4번째 요소 요소만을 선택 */ ol &gt; li:nth-child(4) { background: brown; } /* ul 요소의 모든 자식 요소 중에서 뒤에서부터 시작하여 홀수번째 요소만을 선택 */ ul &gt; :nth-last-child(2n+1) { color: red; } /* ul 요소의 모든 자식 요소 중에서 뒤에서부터 시작하여 짝수번째 요소만을 선택 */ ul &gt; :nth-last-child(2n) { color: blue; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;ol&gt; &lt;li&gt;Espresso&lt;/li&gt; &lt;li&gt;Americano&lt;/li&gt; &lt;li&gt;Caffe Latte&lt;/li&gt; &lt;li&gt;Caffe Mocha&lt;/li&gt; &lt;li&gt;Caramel Latte&lt;/li&gt; &lt;li&gt;Cappuccino&lt;/li&gt; &lt;/ol&gt; &lt;ul&gt; &lt;li&gt;Espresso&lt;/li&gt; &lt;li&gt;Americano&lt;/li&gt; &lt;li&gt;Caffe Latte&lt;/li&gt; &lt;li&gt;Caffe Mocha&lt;/li&gt; &lt;li&gt;Caramel Latte&lt;/li&gt; &lt;li&gt;Cappuccino&lt;/li&gt; &lt;/ul&gt;&lt;/body&gt;&lt;/html&gt; result pseudo-class Description :first-of-type 셀렉터에 해당하는 요소의 부모 요소의 자식 요소 중 첫번째 등장하는 요소를 선택한다. :last-of-type 셀렉터에 해당하는 요소의 부모 요소의 자식 요소 중 마지막에 등장하는 요소를 선택한다. :nth-of-type(n) 셀렉터에 해당하는 요소의 부모 요소의 자식요소 중 앞에서 n번째에 등장하는 요소를 선택한다. :nth-last-of-type(n) 셀렉터에 해당하는 요소의 부모 요소의 자식 요소 중 뒤에서 n번째에 등장하는 요소를 선택한다. 1234567891011121314151617181920212223242526272829303132&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; /* p 요소의 부모 요소의 자식 요소 중 첫번째 등장하는 p 요소 */ p:first-of-type { color: red; } /* p 요소의 부모 요소의 자식 요소 중 마지막 등장하는 p 요소 */ p:last-of-type { color: blue; } /* p 요소의 부모 요소의 자식 요소 중 앞에서 2번째에 등장하는 p 요소 */ p:nth-of-type(2) { color: green; } /* p 요소의 부모 요소의 자식 요소 중 뒤에서 2번째에 등장하는 p 요소 */ p:nth-last-of-type(2) { color: orange;} /* p 요소 중에서 첫번째 자식을 선택 */ p:first-child { background: brown;} &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;This is a heading&lt;/h1&gt; &lt;p&gt;The first paragraph.&lt;/p&gt; &lt;p&gt;The second paragraph.&lt;/p&gt; &lt;p&gt;The third paragraph.&lt;/p&gt; &lt;p&gt;The fourth paragraph.&lt;/p&gt; &lt;div&gt; &lt;h1&gt;This is a heading&lt;/h1&gt; &lt;p&gt;The first paragraph.&lt;/p&gt; &lt;p&gt;The second paragraph.&lt;/p&gt; &lt;p&gt;The third paragraph.&lt;/p&gt; &lt;p&gt;The fourth paragraph.&lt;/p&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; result 7.4 부정 셀렉터(Negation pseudo-class) pseudo-class Description :not(셀렉터) 셀렉터에 해당하지 않는 모든 요소를 선택한다. 12345678910111213141516&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; /* input 요소 중에서 type 어트리뷰트의 값이 password가 아닌 요소를 선택 */ input:not([type=password]) { background: yellow; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;input type=&quot;text&quot; value=&quot;Text input&quot;&gt; &lt;input type=&quot;email&quot; value=&quot;email input&quot;&gt; &lt;input type=&quot;password&quot; value=&quot;Password input&quot;&gt;&lt;/body&gt;&lt;/html&gt; result 1234567891011121314151617181920212223242526272829303132333435363738&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; body { margin: 0; } div { float: left; width: 32%; height: 200px; background-color: red; /* margin-bottom: 2%; */ color: #fff; font-size: 3em; line-height: 200px; text-align: center; } /* div 요소 중에서 1, 4, 7...번째 등장하는 요소가 아닌 요소만을 선택 */ /* 1, 4, 7... : 공차가 3인 등차수열 */ div:not(:nth-of-type(3n+1)) { margin-left: 2%; } /* div 요소 중에서 4번째 이후 등장하는 요소가 아닌 요소만을 선택 */ div:not(:nth-of-type(n+4)) { margin-bottom: 2%; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;1&lt;/div&gt; &lt;div&gt;2&lt;/div&gt; &lt;div&gt;3&lt;/div&gt; &lt;div&gt;4&lt;/div&gt; &lt;div&gt;5&lt;/div&gt; &lt;div&gt;6&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; result 7.5 정합성 체크 셀렉터(validity pseudo-class) pseudo-class Description :valid(셀렉터) 정합성 검즘이 성공한 input 요소 또는 form 요소를 선택한다. :invaild(셀렉터) 정합성 검증이 실패한 input 요소 또는 form 요소를 선택한다. 1234567891011121314151617181920212223242526272829&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; input[type=&quot;text&quot;]:valid { background-color: greenyellow; } input[type=&quot;text&quot;]:invalid { background-color: red; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;label&gt;입력값이 반드시 필요 &lt;input type=&quot;text&quot; required&gt; &lt;/label&gt; &lt;br&gt; &lt;label&gt;특수문자를 포함하지 않는 4자리 문자 또는 숫자 &lt;input type=&quot;text&quot; value=&quot;ab1!&quot; pattern=&quot;[a-zA-Z0-9]{4}&quot; required&gt; &lt;/label&gt; &lt;br&gt; &lt;label&gt;핸드폰 번호 형식 &lt;input type=&quot;text&quot; value=&quot;010-1111-2222&quot; pattern=&quot;^\\d{3}-\\d{3,4}-\\d{4}$&quot; required&gt; &lt;/label&gt;&lt;/body&gt;&lt;/html&gt; result Browser Support 8. 가상 요소 셀렉터(Pseudo-Element Selector)가상 요소는 요소의 특정 부분에 스타일을 적용하기 위하여 사용된다. 특정 부분이란 예를 들어 다음과 같다. 요소 콘텐츠의 첫글자 또는 첫줄 요소 콘텐츠의 앞 또는 뒤 가상 요소에는 두개의 콜론(::)을 사용한다. CSS 표준에 의해 미리 정의된 이름이 있기 때문에 임의의 이름을 사용할 수 없다. 123selector::pseudo-element { property:value;} pseudo-element Description ::first-letter 콘텐츠의 첫클자를 선택한다. ::first-line 콘텐츠의 첫줄을 선택한다. 블록 요소에만 적용할 수 있다. ::after 콘텐츠의 뒤에 위치하는 공간을 선택한다. 일반적으로 content 프로퍼티와 함께 사용된다. ::before 콘텐츠의 앞에 위치하는 공간을 선택한다. 일반적으로 content 프로퍼티와 함께 사용된다. ::selection 드래그한 콘첸츠를 선택한다. iOS Safari 등 일부 브라우저에서 동작 않는다. 1234567891011121314151617181920212223242526272829303132&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; /* p 요소 콘텐츠의 첫글자를 선택 */ p::first-letter { font-size: 3em; } /* p 요소 콘텐츠의 첫줄을 선택 */ p::first-line { color: red; } /* h1 요소 콘텐츠의 앞 공간에 content 어트리뷰트 값을 삽입한다 */ h1::before { content: &quot; HTML!!! &quot;; color: blue; } /* h1 요소 콘텐츠의 뒷 공간에 content 어트리뷰트 값을 삽입한다 */ h1::after { content: &quot; CSS3!!!&quot;; color: red; } /* 드래그한 콘텐츠를 선택한다 */ ::selection { color: red; background: yellow; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;This is a heading&lt;/h1&gt; &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit. Explicabo illum sunt distinctio sed, tempore, repellat rerum et ea laborum voluptatum! Quisquam error fugiat debitis maiores officiis, tenetur ullam amet in!&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; result Referencepoiemaweb.com/css3-selector W3C CSS Document CSS selectors","link":"/2021/04/22/css3-day-2/"},{"title":"css3-day-3","text":"2.3 CSS3 UnitsCSS 프로퍼티 값의 단위CSS 프로퍼티에는 키워드, 크기 단위, 색상 표현 단위 등의 특정 단위를 갖는 값을 지정한다. 출처: https://www.w3schools.com/css/css_syntax.asp 1. 키워드각 프로퍼티에 따라 사용할 수 있는 키워드가 존재한다. 예를 들어 display 프로퍼티 값으로 사용할 수 있는 키워드는 block, inline, inline-block, none 이 있다. 제세한 내용은 각각의 프로퍼티를 참조 2. 크기 단위cm, mm, inch 등의 단위도 존재하나 CSS에서 사용하는 대표적인 크기 단위는 px, em, %이다.px은 절대값이고 em, %는 상대값이다.대부분 브라우저의 폰트 사이즈 기본값은 16px, 1em, 100%이다. 프로퍼티 값이 0인 경우, 단위를 생략할 수 있다. 2.1 pxpx은 픽셀(화소) 단위이다. 1px은 화소 1개 크기를 의미한다. 22인치 LCD 모니터의 경우 해상도가 1680 * 1050 인데 이것은 가로에 1680개의 픽셀, 세로에 1050개의 픽셀을 가진다는 의미이다. 200만 화소(픽셀)의 디지털 카메라로 찍은 사진은 1600 * 1200 = 1,920,000으로 통상 200만 화소라 한다. 픽셀은 디바이스 해상도(resolution)에 따라 상대적인 크기를 갖는다. 대부분의 브라우저는 1px을 1/96 인치의 절대단위로 인식한다. px은 요소의 크기나 이미지의 크기 지정에 주로 사용된다. 12345678910111213141516171819&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; body { text-align: center; } div { font-size: 14px; font-weight: bold; padding: 2em; /* 14px * 2 = 28px */ background-color: rgba(255, 0, 0, 0.2); } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;Font size: 14px&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; result 2.2 %%는 백분률 단위의 상대 단위이다. 요소에 지정된 사이즈(상속된 사이즈나 디폴트 사이즈)에 상대적인 사이즈를 설정한다. 1234567891011121314151617181920&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; body { font-size: 14px; text-align: center; } div { font-size: 120%; /* 14px * 1.2 = 16.8px */ font-weight: bold; padding: 2em; /* 16.8px * 2 = 33.6px */ background-color: rgba(255, 0, 0, 0.2); } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;Font size: 14px * 120% → 16.8px&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; result 2.3 emem은 배수 단위로 상대 단위이다. 요소에 지정된 사이즈(상속된 사이즈나 디폴트 사이즈)에 상대적인 사이즈를 설정한다. 예를 들어 1em은 요소에 지정된 사이즈와 같고 2em은 요소에 지정된 사이즈의 2배이다. 폰트 사이즈 설정이나 콘텐츠를 포함하는 컨테이너의 크기 설정에 사용하면 상대적인 설정이 가능하여 편리하다. 1234567891011121314151617181920&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; body { font-size: 14px; text-align: center; } div { font-size: 1.2em; /* 14px * 1.2 = 16.8px */ font-weight: bold; padding: 2em; /* 16.8px * 2 = 33.6px */ background-color: rgba(255, 0, 0, 0.2); } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;Font size: 1.2em → 14px * 1.2 = 16.8px&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; result 중첩된 자식 요소에 em을 지정하면 모든 자식 요소의 사이즈에 영향을 미치기 때문에 주의하여야 한다. 123456789101112131415161718192021222324252627282930&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; body { font-size: 14px; text-align: center; } div { font-size: 1.2em; /* 14px * 1.2 = 16.8px */ font-weight: bold; padding: 2em; } .box1 { background-color: rgba(255, 0, 0, 0.2); } .box2 { background-color: rgba(255, 0, 0, 0.6); } .box3 { background-color: rgba(255, 0, 0, 0.8); } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class='box1'&gt; Font size: 1.2em ⇒ 14px * 1.2 = 16.8px &lt;div class='box2'&gt; Font size: 1.2em ⇒ 16.8px * 1.2 = 20.16px &lt;div class='box3'&gt; Font size: 1.2em ⇒ 20.16px * 1.2 = 24.192px &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; result 2.4 remem의 기준은 상속의 영향으로 바뀔 수 있다. 즉, 상황에 따라 1.2em은 각기 다른 값을 가질 수 있다. rem은 최상위 요소(html)의 사이즈를 기준으로 삼는다. rem의 r 은 root를 의미한다. 12345678910111213141516171819202122232425262728293031&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; html { font-size: 14px; /* font-size 미지정 시에는 16px */ } div { font-size: 1.2rem; /* html font-size: 14px * 1.2 = 16.8px */ font-weight: bold; padding: 2em; text-align: center; } .box1 { background-color: rgba(255, 0, 0, 0.2); } .box2 { background-color: rgba(255, 0, 0, 0.6); } .box3 { background-color: rgba(255, 0, 0, 0.8); } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class='box1'&gt; Font size: 1.2rem ⇒ 14px * 1.2 = 16.8px &lt;div class='box2'&gt; Font size: 1.2rem ⇒ 14px * 1.2 = 16.8px &lt;div class='box3'&gt; Font size: 1.2rem ⇒ 14px * 1.2 = 16.8px &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; result 사용자가 브라우저의 기본 폰트 크기를 변경하더라도 이에 따라 웹사이트의 레이아웃을 적잘히 조정할 수 있다는 장점이 있다. 따라서 폰트 사이즈 뿐만이 아니라 콘텐츠의 크기에 따라 가변적으로 대응하여야 하는 wrapper 요소(container)등에 적합하다. 123.container { width: 70rem; /* 70rem ⇒ 14px * 70 = 980px */} Reset CSS를 사용하여 사전에 html 요소의 font-size 지정이 필요하다. font-size 미지정 시에는 16px가 적용된다. 2.5 Viewport 단위 (vh, vw, vmin, vmax)반응형 웹디자인은 화명의 크기에 동적으로 대응하기 위해 % 당위를 자주 사용한다. 하지만 % 단위는 em과 같이 상속에 의해 부모 요소에 상대적 영향을 받는다. Viewport 단위는 상대적인 단위로 viewport를 기준으로 한 상대적 사이즈를 의미한다. 단위 Description vw viewport 너비의 1/100 vh viewport 높이의 1/100 vmin viewport 너비 또는 높이 중 작은 쪽의 1/100 vmax viewport 너비 또는 높이 중 큰 쪽의 1/100 예를 들어 viewport 너비가 1000px, 높이가 600px인 경우, 1vw: viewport 너비 1000px의 1%인 10px 12345678910111213141516171819202122&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; body { margin: 0px; } .item { width: 50vw; height: 100vh; text-align: center; line-height: 100vh; font-size: 4rem; color: white; } .item1 { background-color: red; } .item2 { background-color: orange; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class='item item1'&gt;item1&lt;/div&gt; &lt;div class='item item2'&gt;item2&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; result 브라우저에 따라 지원이 완전하지 않을 수 있으므로 주의가 필요하다. 3. 색상 표현 단위색상을 지정하기 위해 키워드(red, blue)를 사용할 수 있다. 사용이 간편하다는 장점이 있으나 표현할 수 있는 색상의 수는 제한된다. 색상을 표현할 수 있는 키워드 리스트는 W3C css3-color를 참조 1234567891011121314151617181920212223242526272829303132&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;body&gt; &lt;h2 style=&quot;background-color:red&quot;&gt; Red background-color &lt;/h2&gt; &lt;h2 style=&quot;background-color:green&quot;&gt; Green background-color &lt;/h2&gt; &lt;h2 style=&quot;background-color:blue;color:white&quot;&gt; Blue background-color and white text color &lt;/h2&gt; &lt;h2 style=&quot;background-color:orange&quot;&gt; Orange background-color &lt;/h2&gt; &lt;h2 style=&quot;background-color:yellow&quot;&gt; Yellow background-color &lt;/h2&gt; &lt;h2 style=&quot;background-color:cyan&quot;&gt; Cyan background-color &lt;/h2&gt; &lt;h2 style=&quot;background-color:black;color:white&quot;&gt; Black background-color and white text color &lt;/h2&gt; &lt;/body&gt;&lt;/html&gt; result 더욱 다양한 색상을 표현하기 위해 다음과 같은 색상 표현 당위를 사용할 수 있다. HTML COLOR CODES Referencepoiemaweb.com/css3-units","link":"/2021/04/26/css3-day-3/"},{"title":"css3-day-4","text":"2.4 CSS3 Box Model박스 모델모든 HTML 요소는 Box 형태의 영역을 가지고 있다. Box 형태란 물론 사각형을 의미한다. 브라우저는 박스 모델의 크기(dimension)와 프로퍼티(색, 배경, 모양 등), 위치를 근거로 하여 렌더링을 실행한다. 웹디자인은 콘텐츠를 담을 박스 모델을 정의하고 CSS 프로퍼티를 통해 스타일(배경, 폰트와 텍스트 등)과 위치 및 정령을 지정하는 것이라고 할 수 있다. Box 모델을 구성하는 콘텐트(Content), 패딩(Padding), 테두리(Border), 마진(Margin)에 대한 설명은 아래와 같다. 명칭 설명 Content 요소의 텍스트나 이미지 등의 실제 내용이 위치하는 영역이다. width, height 프로퍼티를 갖는다. Padding 테두리(Border) 안쪽에 위치하는 요소의 내부 여백 영역이다. padding 프로퍼티 값은 패딩 영역의 두께를 의미하며 기본색은 투명(transparent)이다. 요소에 적용된 배경의 컬러, 이미지는 패딩 영역까지 적용된다. Border 테두리 영역으로 border 프로퍼티 값은 테두리의 두께를 의미한다. Margin 테두리(Border) 바깥에 위치하는 요소의 외부의 여백 영역이다. margin 프로퍼티 값은 마진 영역의 두께를 의미한다. 기본적으로 투명(transparent)하며 배경색을 지정할 수 없다. 123456789101112131415161718192021222324&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; div { /* 배경색의 지정: 콘텐츠 영역과 패딩 영역에 적용된다. */ background-color: lightgrey; /* 콘텐츠 영역의 너비 */ width: 300px; /* 패딩 영역의 두께 */ padding: 25px; /* 테두리: 두께 형태 색상 */ border: 25px solid navy; /* 마진 영역의 두께 */ margin: 25px; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h2&gt;Box Model&lt;/h2&gt; &lt;div&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; result Referencepoiemaweb.com/css3-box-model www.w3schools.com/css/css_boxmodel.asp","link":"/2021/04/27/css3-day-4/"}],"tags":[{"name":"html5","slug":"html5","link":"/tags/html5/"},{"name":"asp.net","slug":"asp-net","link":"/tags/asp-net/"},{"name":"c#","slug":"c","link":"/tags/c/"},{"name":"request","slug":"request","link":"/tags/request/"},{"name":"response","slug":"response","link":"/tags/response/"},{"name":"web","slug":"web","link":"/tags/web/"},{"name":"http","slug":"http","link":"/tags/http/"},{"name":"html","slug":"html","link":"/tags/html/"},{"name":"tag","slug":"tag","link":"/tags/tag/"},{"name":"img","slug":"img","link":"/tags/img/"},{"name":"video","slug":"video","link":"/tags/video/"},{"name":"audio","slug":"audio","link":"/tags/audio/"},{"name":"Structure","slug":"Structure","link":"/tags/Structure/"},{"name":"form","slug":"form","link":"/tags/form/"},{"name":"css","slug":"css","link":"/tags/css/"},{"name":"syntax","slug":"syntax","link":"/tags/syntax/"}],"categories":[{"name":"html","slug":"html","link":"/categories/html/"},{"name":"ASP.NET","slug":"ASP-NET","link":"/categories/ASP-NET/"},{"name":"css","slug":"css","link":"/categories/css/"}]}